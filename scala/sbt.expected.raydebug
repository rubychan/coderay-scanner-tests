comment(/* sbt -- Simple Build Tool
 * Copyright 2011 Mark Harrah
 */)
keyword(package) ident(sbt)

keyword(import) ident(Types)operator(.)ident(_)

keyword(sealed) keyword(trait) class(Settings)operator([)ident(Scope)operator(]) operator({)
  keyword(def) ident(data)operator(:) predefined_type(Map)operator([)ident(Scope)operator(,) ident(AttributeMap)operator(])
  keyword(def) ident(keys)operator(()ident(scope)operator(:) ident(Scope)operator(\))operator(:) predefined_type(Set)operator([)ident(AttributeKey)operator([)ident(_)operator(])operator(])
  keyword(def) ident(scopes)operator(:) predefined_type(Set)operator([)ident(Scope)operator(])
  keyword(def) ident(definingScope)operator(()ident(scope)operator(:) ident(Scope)operator(,) ident(key)operator(:) ident(AttributeKey)operator([)ident(_)operator(])operator(\))operator(:) predefined_type(Option)operator([)ident(Scope)operator(])
  keyword(def) ident(allKeys)operator([)ident(T)operator(])operator(()ident(f)operator(:) operator(()ident(Scope)operator(,) ident(AttributeKey)operator([)ident(_)operator(])operator(\)) operator(=)operator(>) ident(T)operator(\))operator(:) predefined_type(Seq)operator([)ident(T)operator(])
  keyword(def) ident(get)operator([)ident(T)operator(])operator(()ident(scope)operator(:) ident(Scope)operator(,) ident(key)operator(:) ident(AttributeKey)operator([)ident(T)operator(])operator(\))operator(:) predefined_type(Option)operator([)ident(T)operator(])
  keyword(def) ident(getDirect)operator([)ident(T)operator(])operator(()ident(scope)operator(:) ident(Scope)operator(,) ident(key)operator(:) ident(AttributeKey)operator([)ident(T)operator(])operator(\))operator(:) predefined_type(Option)operator([)ident(T)operator(])
  keyword(def) ident(set)operator([)ident(T)operator(])operator(()ident(scope)operator(:) ident(Scope)operator(,) ident(key)operator(:) ident(AttributeKey)operator([)ident(T)operator(])operator(,) ident(value)operator(:) ident(T)operator(\))operator(:) ident(Settings)operator([)ident(Scope)operator(])
operator(})

directive(private) directive(final) type(class) class(Settings0)operator([)ident(Scope)operator(])operator(()keyword(val) ident(data)operator(:) predefined_type(Map)operator([)ident(Scope)operator(,) ident(AttributeMap)operator(])operator(,) keyword(val) ident(delegates)operator(:) ident(Scope) operator(=)operator(>) predefined_type(Seq)operator([)ident(Scope)operator(])operator(\)) directive(extends) ident(Settings)operator([)ident(Scope)operator(]) operator({)
  keyword(def) ident(scopes)operator(:) predefined_type(Set)operator([)ident(Scope)operator(]) operator(=) ident(data)operator(.)ident(keySet)operator(.)ident(toSet)
  keyword(def) ident(keys)operator(()ident(scope)operator(:) ident(Scope)operator(\)) operator(=) ident(data)operator(()ident(scope)operator(\))operator(.)ident(keys)operator(.)ident(toSet)
  keyword(def) ident(allKeys)operator([)ident(T)operator(])operator(()ident(f)operator(:) operator(()ident(Scope)operator(,) ident(AttributeKey)operator([)ident(_)operator(])operator(\)) operator(=)operator(>) ident(T)operator(\))operator(:) predefined_type(Seq)operator([)ident(T)operator(]) operator(=) ident(data)operator(.)ident(flatMap) operator({) keyword(case) operator(()ident(scope)operator(,) ident(map)operator(\)) operator(=)operator(>) ident(map)operator(.)ident(keys)operator(.)ident(map)operator(()ident(k) operator(=)operator(>) ident(f)operator(()ident(scope)operator(,) ident(k)operator(\))operator(\)) operator(}) ident(toSeq)operator(;)

  keyword(def) ident(get)operator([)ident(T)operator(])operator(()ident(scope)operator(:) ident(Scope)operator(,) ident(key)operator(:) ident(AttributeKey)operator([)ident(T)operator(])operator(\))operator(:) predefined_type(Option)operator([)ident(T)operator(]) operator(=)
    ident(delegates)operator(()ident(scope)operator(\))operator(.)ident(toStream)operator(.)ident(flatMap)operator(()ident(sc) operator(=)operator(>) ident(getDirect)operator(()ident(sc)operator(,) ident(key)operator(\))operator(\))operator(.)ident(headOption)
  keyword(def) ident(definingScope)operator(()ident(scope)operator(:) ident(Scope)operator(,) ident(key)operator(:) ident(AttributeKey)operator([)ident(_)operator(])operator(\))operator(:) predefined_type(Option)operator([)ident(Scope)operator(]) operator(=)
    ident(delegates)operator(()ident(scope)operator(\))operator(.)ident(toStream)operator(.)ident(filter)operator(()ident(sc) operator(=)operator(>) ident(getDirect)operator(()ident(sc)operator(,) ident(key)operator(\))operator(.)ident(isDefined)operator(\))operator(.)ident(headOption)

  keyword(def) ident(getDirect)operator([)ident(T)operator(])operator(()ident(scope)operator(:) ident(Scope)operator(,) ident(key)operator(:) ident(AttributeKey)operator([)ident(T)operator(])operator(\))operator(:) predefined_type(Option)operator([)ident(T)operator(]) operator(=)
    operator(()ident(data) ident(get) ident(scope)operator(\))operator(.)ident(flatMap)operator(()ident(_) ident(get) ident(key)operator(\))

  keyword(def) ident(set)operator([)ident(T)operator(])operator(()ident(scope)operator(:) ident(Scope)operator(,) ident(key)operator(:) ident(AttributeKey)operator([)ident(T)operator(])operator(,) ident(value)operator(:) ident(T)operator(\))operator(:) ident(Settings)operator([)ident(Scope)operator(]) operator(=)
    operator({)
      keyword(val) ident(map) operator(=) operator(()ident(data) ident(get) ident(scope)operator(\)) ident(getOrElse) ident(AttributeMap)operator(.)ident(empty)
      keyword(val) ident(newData) operator(=) ident(data)operator(.)ident(updated)operator(()ident(scope)operator(,) ident(map)operator(.)ident(put)operator(()ident(key)operator(,) ident(value)operator(\))operator(\))
      keyword(new) ident(Settings0)operator(()ident(newData)operator(,) ident(delegates)operator(\))
    operator(})
operator(})
comment(// delegates should contain the input Scope as the first entry)
comment(// this trait is intended to be mixed into an object)
keyword(trait) class(Init)operator([)ident(Scope)operator(]) operator({)
  comment(/** The Show instance used when a detailed String needs to be generated.  It is typically used when no context is available.*/)
  keyword(def) ident(showFullKey)operator(:) ident(Show)operator([)ident(ScopedKey)operator([)ident(_)operator(])operator(])

  directive(final) keyword(case) type(class) class(ScopedKey)operator([)ident(T)operator(])operator(()ident(scope)operator(:) ident(Scope)operator(,) ident(key)operator(:) ident(AttributeKey)operator([)ident(T)operator(])operator(\)) directive(extends) ident(KeyedInitialize)operator([)ident(T)operator(]) operator({)
    keyword(def) ident(scopedKey) operator(=) local_variable(this)
  operator(})

  keyword(type) ident(SettingSeq)operator([)ident(T)operator(]) operator(=) predefined_type(Seq)operator([)ident(Setting)operator([)ident(T)operator(])operator(])
  keyword(type) ident(ScopedMap) operator(=) ident(IMap)operator([)ident(ScopedKey)operator(,) ident(SettingSeq)operator(])
  keyword(type) ident(CompiledMap) operator(=) predefined_type(Map)operator([)ident(ScopedKey)operator([)ident(_)operator(])operator(,) ident(Compiled)operator([)ident(_)operator(])operator(])
  keyword(type) ident(MapScoped) operator(=) ident(ScopedKey) operator(~)operator(>) ident(ScopedKey)
  keyword(type) ident(ValidatedRef)operator([)ident(T)operator(]) operator(=) predefined_type(Either)operator([)ident(Undefined)operator(,) ident(ScopedKey)operator([)ident(T)operator(])operator(])
  keyword(type) ident(ValidatedInit)operator([)ident(T)operator(]) operator(=) predefined_type(Either)operator([)predefined_type(Seq)operator([)ident(Undefined)operator(])operator(,) ident(Initialize)operator([)ident(T)operator(])operator(])
  keyword(type) ident(ValidateRef) operator(=) ident(ScopedKey) operator(~)operator(>) ident(ValidatedRef)
  keyword(type) ident(ScopeLocal) operator(=) ident(ScopedKey)operator([)ident(_)operator(]) operator(=)operator(>) predefined_type(Seq)operator([)ident(Setting)operator([)ident(_)operator(])operator(])
  keyword(type) ident(MapConstant) operator(=) ident(ScopedKey) operator(~)operator(>) predefined_type(Option)

  directive(private)operator([)ident(sbt)operator(]) directive(abstract) type(class) class(ValidateKeyRef) operator({)
    keyword(def) ident(apply)operator([)ident(T)operator(])operator(()ident(key)operator(:) ident(ScopedKey)operator([)ident(T)operator(])operator(,) ident(selfRefOk)operator(:) predefined_type(Boolean)operator(\))operator(:) ident(ValidatedRef)operator([)ident(T)operator(])
  operator(})

  comment(/**
   * The result of this initialization is the composition of applied transformations.
   * This can be useful when dealing with dynamic Initialize values.
   */)
  keyword(lazy) keyword(val) ident(capturedTransformations)operator(:) ident(Initialize)operator([)ident(Initialize) operator(~)operator(>) ident(Initialize)operator(]) operator(=) keyword(new) ident(TransformCapture)operator(()ident(idK)operator([)ident(Initialize)operator(])operator(\))

  keyword(def) ident(setting)operator([)ident(T)operator(])operator(()ident(key)operator(:) ident(ScopedKey)operator([)ident(T)operator(])operator(,) ident(init)operator(:) ident(Initialize)operator([)ident(T)operator(])operator(,) ident(pos)operator(:) ident(SourcePosition) operator(=) ident(NoPosition)operator(\))operator(:) ident(Setting)operator([)ident(T)operator(]) operator(=) keyword(new) ident(Setting)operator([)ident(T)operator(])operator(()ident(key)operator(,) ident(init)operator(,) ident(pos)operator(\))
  keyword(def) ident(valueStrict)operator([)ident(T)operator(])operator(()ident(value)operator(:) ident(T)operator(\))operator(:) ident(Initialize)operator([)ident(T)operator(]) operator(=) ident(pure)operator(()operator(()operator(\)) operator(=)operator(>) ident(value)operator(\))
  keyword(def) ident(value)operator([)ident(T)operator(])operator(()ident(value)operator(:) operator(=)operator(>) ident(T)operator(\))operator(:) ident(Initialize)operator([)ident(T)operator(]) operator(=) ident(pure)operator(()ident(value) ident(_)operator(\))
  keyword(def) ident(pure)operator([)ident(T)operator(])operator(()ident(value)operator(:) operator(()operator(\)) operator(=)operator(>) ident(T)operator(\))operator(:) ident(Initialize)operator([)ident(T)operator(]) operator(=) keyword(new) ident(Value)operator(()ident(value)operator(\))
  keyword(def) ident(optional)operator([)ident(T)operator(,) ident(U)operator(])operator(()ident(i)operator(:) ident(Initialize)operator([)ident(T)operator(])operator(\))operator(()ident(f)operator(:) predefined_type(Option)operator([)ident(T)operator(]) operator(=)operator(>) ident(U)operator(\))operator(:) ident(Initialize)operator([)ident(U)operator(]) operator(=) keyword(new) ident(Optional)operator(()predefined_type(Some)operator(()ident(i)operator(\))operator(,) ident(f)operator(\))
  keyword(def) ident(update)operator([)ident(T)operator(])operator(()ident(key)operator(:) ident(ScopedKey)operator([)ident(T)operator(])operator(\))operator(()ident(f)operator(:) ident(T) operator(=)operator(>) ident(T)operator(\))operator(:) ident(Setting)operator([)ident(T)operator(]) operator(=) ident(setting)operator([)ident(T)operator(])operator(()ident(key)operator(,) ident(map)operator(()ident(key)operator(\))operator(()ident(f)operator(\))operator(,) ident(NoPosition)operator(\))
  keyword(def) ident(bind)operator([)ident(S)operator(,) ident(T)operator(])operator(()ident(in)operator(:) ident(Initialize)operator([)ident(S)operator(])operator(\))operator(()ident(f)operator(:) ident(S) operator(=)operator(>) ident(Initialize)operator([)ident(T)operator(])operator(\))operator(:) ident(Initialize)operator([)ident(T)operator(]) operator(=) keyword(new) ident(Bind)operator(()ident(f)operator(,) ident(in)operator(\))
  keyword(def) ident(map)operator([)ident(S)operator(,) ident(T)operator(])operator(()ident(in)operator(:) ident(Initialize)operator([)ident(S)operator(])operator(\))operator(()ident(f)operator(:) ident(S) operator(=)operator(>) ident(T)operator(\))operator(:) ident(Initialize)operator([)ident(T)operator(]) operator(=) keyword(new) ident(Apply)operator([)operator(()operator({) keyword(type) ident(l)operator([)ident(L)operator([)ident(x)operator(])operator(]) operator(=) ident(L)operator([)ident(S)operator(]) operator(})operator(\))error(#)ident(l)operator(,) ident(T)operator(])operator(()ident(f)operator(,) ident(in)operator(,) ident(AList)operator(.)ident(single)operator([)ident(S)operator(])operator(\))
  keyword(def) ident(app)operator([)ident(K)operator([)ident(L)operator([)ident(x)operator(])operator(])operator(,) ident(T)operator(])operator(()ident(inputs)operator(:) ident(K)operator([)ident(Initialize)operator(])operator(\))operator(()ident(f)operator(:) ident(K)operator([)ident(Id)operator(]) operator(=)operator(>) ident(T)operator(\))operator(()keyword(implicit) ident(alist)operator(:) ident(AList)operator([)ident(K)operator(])operator(\))operator(:) ident(Initialize)operator([)ident(T)operator(]) operator(=) keyword(new) ident(Apply)operator([)ident(K)operator(,) ident(T)operator(])operator(()ident(f)operator(,) ident(inputs)operator(,) ident(alist)operator(\))
  keyword(def) ident(uniform)operator([)ident(S)operator(,) ident(T)operator(])operator(()ident(inputs)operator(:) predefined_type(Seq)operator([)ident(Initialize)operator([)ident(S)operator(])operator(])operator(\))operator(()ident(f)operator(:) predefined_type(Seq)operator([)ident(S)operator(]) operator(=)operator(>) ident(T)operator(\))operator(:) ident(Initialize)operator([)ident(T)operator(]) operator(=)
    keyword(new) ident(Apply)operator([)operator(()operator({) keyword(type) ident(l)operator([)ident(L)operator([)ident(x)operator(])operator(]) operator(=) predefined_type(List)operator([)ident(L)operator([)ident(S)operator(])operator(]) operator(})operator(\))error(#)ident(l)operator(,) ident(T)operator(])operator(()ident(f)operator(,) ident(inputs)operator(.)ident(toList)operator(,) ident(AList)operator(.)ident(seq)operator([)ident(S)operator(])operator(\))

  comment(/**
   * The result of this initialization is the validated `key`.
   * No dependency is introduced on `key`.  If `selfRefOk` is true, validation will not fail if the key is referenced by a definition of `key`.
   * That is, key := f(validated(key\).value\) is allowed only if `selfRefOk == true`.
   */)
  directive(private)operator([)ident(sbt)operator(]) directive(final) keyword(def) ident(validated)operator([)ident(T)operator(])operator(()ident(key)operator(:) ident(ScopedKey)operator([)ident(T)operator(])operator(,) ident(selfRefOk)operator(:) predefined_type(Boolean)operator(\))operator(:) ident(ValidationCapture)operator([)ident(T)operator(]) operator(=) keyword(new) ident(ValidationCapture)operator(()ident(key)operator(,) ident(selfRefOk)operator(\))

  annotation(@deprecated)operator(()string<delimiter(")content(0.13.7)delimiter(")>operator(,) string<delimiter(")content(Use the version with default arguments and default paramter.)delimiter(")>operator(\))
  directive(final) keyword(def) ident(derive)operator([)ident(T)operator(])operator(()ident(s)operator(:) ident(Setting)operator([)ident(T)operator(])operator(,) ident(allowDynamic)operator(:) predefined_type(Boolean)operator(,) ident(filter)operator(:) ident(Scope) operator(=)operator(>) predefined_type(Boolean)operator(,) ident(trigger)operator(:) ident(AttributeKey)operator([)ident(_)operator(]) operator(=)operator(>) predefined_type(Boolean)operator(\))operator(:) ident(Setting)operator([)ident(T)operator(]) operator(=)
    ident(derive)operator(()ident(s)operator(,) ident(allowDynamic)operator(,) ident(filter)operator(,) ident(trigger)operator(,) predefined_constant(false)operator(\))
  comment(/**
   * Constructs a derived setting that will be automatically defined in every scope where one of its dependencies
   * is explicitly defined and the where the scope matches `filter`.
   * A setting initialized with dynamic dependencies is only allowed if `allowDynamic` is true.
   * Only the static dependencies are tracked, however.  Dependencies on previous values do not introduce a derived setting either.
   */)
  directive(final) keyword(def) ident(derive)operator([)ident(T)operator(])operator(()ident(s)operator(:) ident(Setting)operator([)ident(T)operator(])operator(,) ident(allowDynamic)operator(:) predefined_type(Boolean) operator(=) predefined_constant(false)operator(,) ident(filter)operator(:) ident(Scope) operator(=)operator(>) predefined_type(Boolean) operator(=) reserved(const)operator(()predefined_constant(true)operator(\))operator(,) ident(trigger)operator(:) ident(AttributeKey)operator([)ident(_)operator(]) operator(=)operator(>) predefined_type(Boolean) operator(=) reserved(const)operator(()predefined_constant(true)operator(\))operator(,) ident(default)operator(:) predefined_type(Boolean) operator(=) predefined_constant(false)operator(\))operator(:) ident(Setting)operator([)ident(T)operator(]) operator(=) operator({)
    ident(deriveAllowed)operator(()ident(s)operator(,) ident(allowDynamic)operator(\)) ident(foreach) ident(sys)operator(.)ident(error)
    keyword(val) ident(d) operator(=) keyword(new) ident(DerivedSetting)operator([)ident(T)operator(])operator(()ident(s)operator(.)ident(key)operator(,) ident(s)operator(.)ident(init)operator(,) ident(s)operator(.)ident(pos)operator(,) ident(filter)operator(,) ident(trigger)operator(\))
    keyword(if) operator(()ident(default)operator(\)) ident(d)operator(.)ident(default)operator(()operator(\)) keyword(else) ident(d)
  operator(})
  keyword(def) ident(deriveAllowed)operator([)ident(T)operator(])operator(()ident(s)operator(:) ident(Setting)operator([)ident(T)operator(])operator(,) ident(allowDynamic)operator(:) predefined_type(Boolean)operator(\))operator(:) predefined_type(Option)operator([)ident(String)operator(]) operator(=) ident(s)operator(.)ident(init) keyword(match) operator({)
    keyword(case) ident(_)operator(:) ident(Bind)operator([)ident(_)operator(,) ident(_)operator(]) keyword(if) operator(!)ident(allowDynamic) operator(=)operator(>) predefined_type(Some)operator(()string<delimiter(")content(Cannot derive from dynamic dependencies.)delimiter(")>operator(\))
    keyword(case) ident(_)                              operator(=)operator(>) predefined_type(None)
  operator(})
  comment(// id is used for equality)
  directive(private)operator([)ident(sbt)operator(]) directive(final) keyword(def) ident(defaultSetting)operator([)ident(T)operator(])operator(()ident(s)operator(:) ident(Setting)operator([)ident(T)operator(])operator(\))operator(:) ident(Setting)operator([)ident(T)operator(]) operator(=) ident(s)operator(.)ident(default)operator(()operator(\))
  directive(private)operator([)ident(sbt)operator(]) keyword(def) ident(defaultSettings)operator(()ident(ss)operator(:) predefined_type(Seq)operator([)ident(Setting)operator([)ident(_)operator(])operator(])operator(\))operator(:) predefined_type(Seq)operator([)ident(Setting)operator([)ident(_)operator(])operator(]) operator(=) ident(ss)operator(.)ident(map)operator(()ident(s) operator(=)operator(>) ident(defaultSetting)operator(()ident(s)operator(\))operator(\))
  directive(private)operator([)local_variable(this)operator(]) directive(final) keyword(val) ident(nextID) operator(=) keyword(new) ident(java)operator(.)ident(util)operator(.)ident(concurrent)operator(.)ident(atomic)operator(.)ident(AtomicLong)
  directive(private)operator([)local_variable(this)operator(]) directive(final) keyword(def) ident(nextDefaultID)operator(()operator(\))operator(:) predefined_type(Long) operator(=) ident(nextID)operator(.)ident(incrementAndGet)operator(()operator(\))

  keyword(def) ident(empty)operator(()keyword(implicit) ident(delegates)operator(:) ident(Scope) operator(=)operator(>) predefined_type(Seq)operator([)ident(Scope)operator(])operator(\))operator(:) ident(Settings)operator([)ident(Scope)operator(]) operator(=) keyword(new) ident(Settings0)operator(()predefined_type(Map)operator(.)ident(empty)operator(,) ident(delegates)operator(\))
  keyword(def) ident(asTransform)operator(()ident(s)operator(:) ident(Settings)operator([)ident(Scope)operator(])operator(\))operator(:) ident(ScopedKey) operator(~)operator(>) ident(Id) operator(=) keyword(new) operator(()ident(ScopedKey) operator(~)operator(>) ident(Id)operator(\)) operator({)
    keyword(def) ident(apply)operator([)ident(T)operator(])operator(()ident(k)operator(:) ident(ScopedKey)operator([)ident(T)operator(])operator(\))operator(:) ident(T) operator(=) ident(getValue)operator(()ident(s)operator(,) ident(k)operator(\))
  operator(})
  keyword(def) ident(getValue)operator([)ident(T)operator(])operator(()ident(s)operator(:) ident(Settings)operator([)ident(Scope)operator(])operator(,) ident(k)operator(:) ident(ScopedKey)operator([)ident(T)operator(])operator(\)) operator(=) ident(s)operator(.)ident(get)operator(()ident(k)operator(.)ident(scope)operator(,) ident(k)operator(.)ident(key)operator(\)) ident(getOrElse) operator(()keyword(throw) keyword(new) ident(InvalidReference)operator(()ident(k)operator(\))operator(\))
  keyword(def) ident(asFunction)operator([)ident(T)operator(])operator(()ident(s)operator(:) ident(Settings)operator([)ident(Scope)operator(])operator(\))operator(:) ident(ScopedKey)operator([)ident(T)operator(]) operator(=)operator(>) ident(T) operator(=) ident(k) operator(=)operator(>) ident(getValue)operator(()ident(s)operator(,) ident(k)operator(\))
  keyword(def) ident(mapScope)operator(()ident(f)operator(:) ident(Scope) operator(=)operator(>) ident(Scope)operator(\))operator(:) ident(MapScoped) operator(=) keyword(new) ident(MapScoped) operator({)
    keyword(def) ident(apply)operator([)ident(T)operator(])operator(()ident(k)operator(:) ident(ScopedKey)operator([)ident(T)operator(])operator(\))operator(:) ident(ScopedKey)operator([)ident(T)operator(]) operator(=) ident(k)operator(.)ident(copy)operator(()ident(scope) operator(=) ident(f)operator(()ident(k)operator(.)ident(scope)operator(\))operator(\))
  operator(})
  directive(private) directive(final) type(class) class(InvalidReference)operator(()keyword(val) ident(key)operator(:) ident(ScopedKey)operator([)ident(_)operator(])operator(\)) directive(extends) ident(RuntimeException)operator(()string<delimiter(")content(Internal settings error: invalid reference to )delimiter(")> operator(+) ident(showFullKey)operator(()ident(key)operator(\))operator(\))

  directive(private)operator([)local_variable(this)operator(]) keyword(def) ident(applyDefaults)operator(()ident(ss)operator(:) predefined_type(Seq)operator([)ident(Setting)operator([)ident(_)operator(])operator(])operator(\))operator(:) predefined_type(Seq)operator([)ident(Setting)operator([)ident(_)operator(])operator(]) operator(=)
    operator({)
      keyword(val) operator(()ident(defaults)operator(,) ident(others)operator(\)) operator(=) ident(Util)operator(.)ident(separate)operator([)ident(Setting)operator([)ident(_)operator(])operator(,) ident(DefaultSetting)operator([)ident(_)operator(])operator(,) ident(Setting)operator([)ident(_)operator(])operator(])operator(()ident(ss)operator(\)) operator({) keyword(case) ident(u)operator(:) ident(DefaultSetting)operator([)ident(_)operator(]) operator(=)operator(>) predefined_type(Left)operator(()ident(u)operator(\))operator(;) keyword(case) ident(s) operator(=)operator(>) predefined_type(Right)operator(()ident(s)operator(\)) operator(})
      ident(defaults)operator(.)ident(distinct) operator(++) ident(others)
    operator(})

  keyword(def) ident(compiled)operator(()ident(init)operator(:) predefined_type(Seq)operator([)ident(Setting)operator([)ident(_)operator(])operator(])operator(,) ident(actual)operator(:) predefined_type(Boolean) operator(=) predefined_constant(true)operator(\))operator(()keyword(implicit) ident(delegates)operator(:) ident(Scope) operator(=)operator(>) predefined_type(Seq)operator([)ident(Scope)operator(])operator(,) ident(scopeLocal)operator(:) ident(ScopeLocal)operator(,) ident(display)operator(:) ident(Show)operator([)ident(ScopedKey)operator([)ident(_)operator(])operator(])operator(\))operator(:) ident(CompiledMap) operator(=)
    operator({)
      keyword(val) ident(initDefaults) operator(=) ident(applyDefaults)operator(()ident(init)operator(\))
      comment(// inject derived settings into scopes where their dependencies are directly defined)
      comment(// and prepend per-scope settings)
      keyword(val) ident(derived) operator(=) ident(deriveAndLocal)operator(()ident(initDefaults)operator(\))
      comment(// group by Scope/Key, dropping dead initializations)
      keyword(val) ident(sMap)operator(:) ident(ScopedMap) operator(=) ident(grouped)operator(()ident(derived)operator(\))
      comment(// delegate references to undefined values according to 'delegates')
      keyword(val) ident(dMap)operator(:) ident(ScopedMap) operator(=) keyword(if) operator(()ident(actual)operator(\)) ident(delegate)operator(()ident(sMap)operator(\))operator(()ident(delegates)operator(,) ident(display)operator(\)) keyword(else) ident(sMap)
      comment(// merge Seq[Setting[_]] into Compiled)
      ident(compile)operator(()ident(dMap)operator(\))
    operator(})
  keyword(def) ident(make)operator(()ident(init)operator(:) predefined_type(Seq)operator([)ident(Setting)operator([)ident(_)operator(])operator(])operator(\))operator(()keyword(implicit) ident(delegates)operator(:) ident(Scope) operator(=)operator(>) predefined_type(Seq)operator([)ident(Scope)operator(])operator(,) ident(scopeLocal)operator(:) ident(ScopeLocal)operator(,) ident(display)operator(:) ident(Show)operator([)ident(ScopedKey)operator([)ident(_)operator(])operator(])operator(\))operator(:) ident(Settings)operator([)ident(Scope)operator(]) operator(=)
    operator({)
      keyword(val) ident(cMap) operator(=) ident(compiled)operator(()ident(init)operator(\))operator(()ident(delegates)operator(,) ident(scopeLocal)operator(,) ident(display)operator(\))
      comment(// order the initializations.  cyclic references are detected here.)
      keyword(val) ident(ordered)operator(:) predefined_type(Seq)operator([)ident(Compiled)operator([)ident(_)operator(])operator(]) operator(=) ident(sort)operator(()ident(cMap)operator(\))
      comment(// evaluation: apply the initializations.)
      keyword(try) operator({) ident(applyInits)operator(()ident(ordered)operator(\)) operator(})
      keyword(catch) operator({) keyword(case) ident(rru)operator(:) ident(RuntimeUndefined) operator(=)operator(>) keyword(throw) ident(Uninitialized)operator(()ident(cMap)operator(.)ident(keys)operator(.)ident(toSeq)operator(,) ident(delegates)operator(,) ident(rru)operator(.)ident(undefined)operator(,) predefined_constant(true)operator(\)) operator(})
    operator(})
  keyword(def) ident(sort)operator(()ident(cMap)operator(:) ident(CompiledMap)operator(\))operator(:) predefined_type(Seq)operator([)ident(Compiled)operator([)ident(_)operator(])operator(]) operator(=)
    ident(Dag)operator(.)ident(topologicalSort)operator(()ident(cMap)operator(.)ident(values)operator(\))operator(()ident(_)operator(.)ident(dependencies)operator(.)ident(map)operator(()ident(cMap)operator(\))operator(\))

  keyword(def) ident(compile)operator(()ident(sMap)operator(:) ident(ScopedMap)operator(\))operator(:) ident(CompiledMap) operator(=)
    ident(sMap)operator(.)ident(toTypedSeq)operator(.)ident(map) operator({)
      keyword(case) ident(sMap)operator(.)ident(TPair)operator(()ident(k)operator(,) ident(ss)operator(\)) operator(=)operator(>)
        keyword(val) ident(deps) operator(=) ident(ss) ident(flatMap) operator({) ident(_)operator(.)ident(dependencies) operator(}) ident(toSet)operator(;)
        operator(()ident(k)operator(,) keyword(new) ident(Compiled)operator(()ident(k)operator(,) ident(deps)operator(,) ident(ss)operator(\))operator(\))
    operator(}) ident(toMap)operator(;)

  keyword(def) ident(grouped)operator(()ident(init)operator(:) predefined_type(Seq)operator([)ident(Setting)operator([)ident(_)operator(])operator(])operator(\))operator(:) ident(ScopedMap) operator(=)
    operator(()operator(()ident(IMap)operator(.)ident(empty)operator(:) ident(ScopedMap)operator(\)) operator(/)operator(:) ident(init)operator(\))operator(()operator(()ident(m)operator(,) ident(s)operator(\)) operator(=)operator(>) ident(add)operator(()ident(m)operator(,) ident(s)operator(\))operator(\))

  keyword(def) ident(add)operator([)ident(T)operator(])operator(()ident(m)operator(:) ident(ScopedMap)operator(,) ident(s)operator(:) ident(Setting)operator([)ident(T)operator(])operator(\))operator(:) ident(ScopedMap) operator(=)
    ident(m)operator(.)ident(mapValue)operator([)ident(T)operator(])operator(()ident(s)operator(.)ident(key)operator(,) predefined_type(Nil)operator(,) ident(ss) operator(=)operator(>) ident(append)operator(()ident(ss)operator(,) ident(s)operator(\))operator(\))

  keyword(def) ident(append)operator([)ident(T)operator(])operator(()ident(ss)operator(:) predefined_type(Seq)operator([)ident(Setting)operator([)ident(T)operator(])operator(])operator(,) ident(s)operator(:) ident(Setting)operator([)ident(T)operator(])operator(\))operator(:) predefined_type(Seq)operator([)ident(Setting)operator([)ident(T)operator(])operator(]) operator(=)
    keyword(if) operator(()ident(s)operator(.)ident(definitive)operator(\)) ident(s) operator(:)operator(:) predefined_type(Nil) keyword(else) ident(ss) operator(:)operator(+) ident(s)

  keyword(def) ident(addLocal)operator(()ident(init)operator(:) predefined_type(Seq)operator([)ident(Setting)operator([)ident(_)operator(])operator(])operator(\))operator(()keyword(implicit) ident(scopeLocal)operator(:) ident(ScopeLocal)operator(\))operator(:) predefined_type(Seq)operator([)ident(Setting)operator([)ident(_)operator(])operator(]) operator(=)
    ident(init)operator(.)ident(flatMap)operator(()ident(_)operator(.)ident(dependencies) ident(flatMap) ident(scopeLocal)operator(\)) operator(++) ident(init)

  keyword(def) ident(delegate)operator(()ident(sMap)operator(:) ident(ScopedMap)operator(\))operator(()keyword(implicit) ident(delegates)operator(:) ident(Scope) operator(=)operator(>) predefined_type(Seq)operator([)ident(Scope)operator(])operator(,) ident(display)operator(:) ident(Show)operator([)ident(ScopedKey)operator([)ident(_)operator(])operator(])operator(\))operator(:) ident(ScopedMap) operator(=)
    operator({)
      keyword(def) ident(refMap)operator(()ident(ref)operator(:) ident(Setting)operator([)ident(_)operator(])operator(,) ident(isFirst)operator(:) predefined_type(Boolean)operator(\)) operator(=) keyword(new) ident(ValidateKeyRef) operator({)
        keyword(def) ident(apply)operator([)ident(T)operator(])operator(()ident(k)operator(:) ident(ScopedKey)operator([)ident(T)operator(])operator(,) ident(selfRefOk)operator(:) predefined_type(Boolean)operator(\)) operator(=)
          ident(delegateForKey)operator(()ident(sMap)operator(,) ident(k)operator(,) ident(delegates)operator(()ident(k)operator(.)ident(scope)operator(\))operator(,) ident(ref)operator(,) ident(selfRefOk) operator(||) operator(!)ident(isFirst)operator(\))
      operator(})
      keyword(type) ident(ValidatedSettings)operator([)ident(T)operator(]) operator(=) predefined_type(Either)operator([)predefined_type(Seq)operator([)ident(Undefined)operator(])operator(,) ident(SettingSeq)operator([)ident(T)operator(])operator(])
      keyword(val) ident(f) operator(=) keyword(new) operator(()ident(SettingSeq) operator(~)operator(>) ident(ValidatedSettings)operator(\)) operator({)
        keyword(def) ident(apply)operator([)ident(T)operator(])operator(()ident(ks)operator(:) predefined_type(Seq)operator([)ident(Setting)operator([)ident(T)operator(])operator(])operator(\)) operator(=) operator({)
          keyword(val) operator(()ident(undefs)operator(,) ident(valid)operator(\)) operator(=) ident(Util)operator(.)ident(separate)operator(()ident(ks)operator(.)ident(zipWithIndex)operator(\)) operator({) keyword(case) operator(()ident(s)operator(,) ident(i)operator(\)) operator(=)operator(>) ident(s) ident(validateKeyReferenced) ident(refMap)operator(()ident(s)operator(,) ident(i) operator(==) integer(0)operator(\)) operator(})
          keyword(if) operator(()ident(undefs)operator(.)ident(isEmpty)operator(\)) predefined_type(Right)operator(()ident(valid)operator(\)) keyword(else) predefined_type(Left)operator(()ident(undefs)operator(.)ident(flatten)operator(\))
        operator(})
      operator(})
      keyword(type) ident(Undefs)operator([)ident(_)operator(]) operator(=) predefined_type(Seq)operator([)ident(Undefined)operator(])
      keyword(val) operator(()ident(undefineds)operator(,) ident(result)operator(\)) operator(=) ident(sMap)operator(.)ident(mapSeparate)operator([)ident(Undefs)operator(,) ident(SettingSeq)operator(])operator(()ident(f)operator(\))
      keyword(if) operator(()ident(undefineds)operator(.)ident(isEmpty)operator(\))
        ident(result)
      keyword(else)
        keyword(throw) ident(Uninitialized)operator(()ident(sMap)operator(.)ident(keys)operator(.)ident(toSeq)operator(,) ident(delegates)operator(,) ident(undefineds)operator(.)ident(values)operator(.)ident(flatten)operator(.)ident(toList)operator(,) predefined_constant(false)operator(\))
    operator(})
  directive(private)operator([)local_variable(this)operator(]) keyword(def) ident(delegateForKey)operator([)ident(T)operator(])operator(()ident(sMap)operator(:) ident(ScopedMap)operator(,) ident(k)operator(:) ident(ScopedKey)operator([)ident(T)operator(])operator(,) ident(scopes)operator(:) predefined_type(Seq)operator([)ident(Scope)operator(])operator(,) ident(ref)operator(:) ident(Setting)operator([)ident(_)operator(])operator(,) ident(selfRefOk)operator(:) predefined_type(Boolean)operator(\))operator(:) predefined_type(Either)operator([)ident(Undefined)operator(,) ident(ScopedKey)operator([)ident(T)operator(])operator(]) operator(=)
    operator({)
      keyword(val) ident(skeys) operator(=) ident(scopes)operator(.)ident(iterator)operator(.)ident(map)operator(()ident(x) operator(=)operator(>) ident(ScopedKey)operator(()ident(x)operator(,) ident(k)operator(.)ident(key)operator(\))operator(\))
      keyword(val) ident(definedAt) operator(=) ident(skeys)operator(.)ident(find)operator(()ident(sk) operator(=)operator(>) operator(()ident(selfRefOk) operator(||) ident(ref)operator(.)ident(key) operator(!=) ident(sk)operator(\)) operator(&&) operator(()ident(sMap) ident(contains) ident(sk)operator(\))operator(\))
      ident(definedAt)operator(.)ident(toRight)operator(()ident(Undefined)operator(()ident(ref)operator(,) ident(k)operator(\))operator(\))
    operator(})

  directive(private)operator([)local_variable(this)operator(]) keyword(def) ident(applyInits)operator(()ident(ordered)operator(:) predefined_type(Seq)operator([)ident(Compiled)operator([)ident(_)operator(])operator(])operator(\))operator(()keyword(implicit) ident(delegates)operator(:) ident(Scope) operator(=)operator(>) predefined_type(Seq)operator([)ident(Scope)operator(])operator(\))operator(:) ident(Settings)operator([)ident(Scope)operator(]) operator(=)
    operator({)
      keyword(val) ident(x) operator(=) ident(java)operator(.)ident(util)operator(.)ident(concurrent)operator(.)ident(Executors)operator(.)ident(newFixedThreadPool)operator(()ident(Runtime)operator(.)ident(getRuntime)operator(.)ident(availableProcessors)operator(\))
      keyword(try) operator({)
        keyword(val) ident(eval)operator(:) ident(EvaluateSettings)operator([)ident(Scope)operator(]) operator(=) keyword(new) ident(EvaluateSettings)operator([)ident(Scope)operator(]) operator({)
          keyword(override) keyword(val) ident(init)operator(:) ident(Init)operator(.)ident(this)operator(.)ident(type) operator(=) ident(Init)operator(.)ident(this)
          keyword(def) ident(compiledSettings) operator(=) ident(ordered)
          keyword(def) ident(executor) operator(=) ident(x)
        operator(})
        ident(eval)operator(.)ident(run)
      operator(}) keyword(finally) operator({) ident(x)operator(.)ident(shutdown)operator(()operator(\)) operator(})
    operator(})

  keyword(def) ident(showUndefined)operator(()ident(u)operator(:) ident(Undefined)operator(,) ident(validKeys)operator(:) predefined_type(Seq)operator([)ident(ScopedKey)operator([)ident(_)operator(])operator(])operator(,) ident(delegates)operator(:) ident(Scope) operator(=)operator(>) predefined_type(Seq)operator([)ident(Scope)operator(])operator(\))operator(()keyword(implicit) ident(display)operator(:) ident(Show)operator([)ident(ScopedKey)operator([)ident(_)operator(])operator(])operator(\))operator(:) ident(String) operator(=)
    operator({)
      keyword(val) ident(guessed) operator(=) ident(guessIntendedScope)operator(()ident(validKeys)operator(,) ident(delegates)operator(,) ident(u)operator(.)ident(referencedKey)operator(\))
      keyword(val) ident(derived) operator(=) ident(u)operator(.)ident(defining)operator(.)ident(isDerived)
      keyword(val) ident(refString) operator(=) ident(display)operator(()ident(u)operator(.)ident(defining)operator(.)ident(key)operator(\))
      keyword(val) ident(sourceString) operator(=) keyword(if) operator(()ident(derived)operator(\)) string<delimiter(")delimiter(")> keyword(else) ident(parenPosString)operator(()ident(u)operator(.)ident(defining)operator(\))
      keyword(val) ident(guessedString) operator(=) keyword(if) operator(()ident(derived)operator(\)) string<delimiter(")delimiter(")> keyword(else) ident(guessed)operator(.)ident(map)operator(()ident(g) operator(=)operator(>) string<delimiter(")char(\\n)content(     Did you mean )delimiter(")> operator(+) ident(display)operator(()ident(g)operator(\)) operator(+) string<delimiter(")content( ?)delimiter(")>operator(\))operator(.)ident(toList)operator(.)ident(mkString)
      keyword(val) ident(derivedString) operator(=) keyword(if) operator(()ident(derived)operator(\)) string<delimiter(")content(, which is a derived setting that needs this key to be defined in this scope.)delimiter(")> keyword(else) string<delimiter(")delimiter(")>
      ident(display)operator(()ident(u)operator(.)ident(referencedKey)operator(\)) operator(+) string<delimiter(")content( from )delimiter(")> operator(+) ident(refString) operator(+) ident(sourceString) operator(+) ident(derivedString) operator(+) ident(guessedString)
    operator(})
  directive(private)operator([)local_variable(this)operator(]) keyword(def) ident(parenPosString)operator(()ident(s)operator(:) ident(Setting)operator([)ident(_)operator(])operator(\))operator(:) ident(String) operator(=)
    ident(s)operator(.)ident(positionString) keyword(match) operator({) keyword(case) predefined_type(None) operator(=)operator(>) string<delimiter(")delimiter(")>operator(;) keyword(case) predefined_type(Some)operator(()ident(s)operator(\)) operator(=)operator(>) string<delimiter(")content( ()delimiter(")> operator(+) ident(s) operator(+) string<delimiter(")content(\))delimiter(")> operator(})

  keyword(def) ident(guessIntendedScope)operator(()ident(validKeys)operator(:) predefined_type(Seq)operator([)ident(ScopedKey)operator([)ident(_)operator(])operator(])operator(,) ident(delegates)operator(:) ident(Scope) operator(=)operator(>) predefined_type(Seq)operator([)ident(Scope)operator(])operator(,) ident(key)operator(:) ident(ScopedKey)operator([)ident(_)operator(])operator(\))operator(:) predefined_type(Option)operator([)ident(ScopedKey)operator([)ident(_)operator(])operator(]) operator(=)
    operator({)
      keyword(val) ident(distances) operator(=) ident(validKeys)operator(.)ident(flatMap) operator({) ident(validKey) operator(=)operator(>) ident(refinedDistance)operator(()ident(delegates)operator(,) ident(validKey)operator(,) ident(key)operator(\))operator(.)ident(map)operator(()ident(dist) operator(=)operator(>) operator(()ident(dist)operator(,) ident(validKey)operator(\))operator(\)) operator(})
      ident(distances)operator(.)ident(sortBy)operator(()ident(_)operator(.)ident(_1)operator(\))operator(.)ident(map)operator(()ident(_)operator(.)ident(_2)operator(\))operator(.)ident(headOption)
    operator(})
  keyword(def) ident(refinedDistance)operator(()ident(delegates)operator(:) ident(Scope) operator(=)operator(>) predefined_type(Seq)operator([)ident(Scope)operator(])operator(,) ident(a)operator(:) ident(ScopedKey)operator([)ident(_)operator(])operator(,) ident(b)operator(:) ident(ScopedKey)operator([)ident(_)operator(])operator(\))operator(:) predefined_type(Option)operator([)predefined_type(Int)operator(]) operator(=)
    keyword(if) operator(()ident(a)operator(.)ident(key) operator(!=) ident(b)operator(.)ident(key) operator(||) ident(a) operator(==) ident(b)operator(\)) predefined_type(None)
    keyword(else) operator({)
      keyword(val) ident(dist) operator(=) ident(delegates)operator(()ident(a)operator(.)ident(scope)operator(\))operator(.)ident(indexOf)operator(()ident(b)operator(.)ident(scope)operator(\))
      keyword(if) operator(()ident(dist) operator(<) integer(0)operator(\)) predefined_type(None) keyword(else) predefined_type(Some)operator(()ident(dist)operator(\))
    operator(})

  directive(final) type(class) class(Uninitialized)operator(()keyword(val) ident(undefined)operator(:) predefined_type(Seq)operator([)ident(Undefined)operator(])operator(,) keyword(override) keyword(val) ident(toString)operator(:) ident(String)operator(\)) directive(extends) exception(Exception)operator(()ident(toString)operator(\))
  directive(final) type(class) class(Undefined) directive(private)operator([)ident(sbt)operator(]) operator(()keyword(val) ident(defining)operator(:) ident(Setting)operator([)ident(_)operator(])operator(,) keyword(val) ident(referencedKey)operator(:) ident(ScopedKey)operator([)ident(_)operator(])operator(\)) operator({)
    annotation(@deprecated)operator(()string<delimiter(")content(For compatibility only, use `defining` directly.)delimiter(")>operator(,) string<delimiter(")content(0.13.1)delimiter(")>operator(\))
    keyword(val) ident(definingKey) operator(=) ident(defining)operator(.)ident(key)
    annotation(@deprecated)operator(()string<delimiter(")content(For compatibility only, use `defining` directly.)delimiter(")>operator(,) string<delimiter(")content(0.13.1)delimiter(")>operator(\))
    keyword(val) ident(derived)operator(:) predefined_type(Boolean) operator(=) ident(defining)operator(.)ident(isDerived)
    annotation(@deprecated)operator(()string<delimiter(")content(Use the non-deprecated Undefined factory method.)delimiter(")>operator(,) string<delimiter(")content(0.13.1)delimiter(")>operator(\))
    keyword(def) local_variable(this)operator(()ident(definingKey)operator(:) ident(ScopedKey)operator([)ident(_)operator(])operator(,) ident(referencedKey)operator(:) ident(ScopedKey)operator([)ident(_)operator(])operator(,) ident(derived)operator(:) predefined_type(Boolean)operator(\)) operator(=) local_variable(this)operator(()ident(fakeUndefinedSetting)operator(()ident(definingKey)operator(,) ident(derived)operator(\))operator(,) ident(referencedKey)operator(\))
  operator(})
  directive(final) type(class) class(RuntimeUndefined)operator(()keyword(val) ident(undefined)operator(:) predefined_type(Seq)operator([)ident(Undefined)operator(])operator(\)) directive(extends) ident(RuntimeException)operator(()string<delimiter(")content(References to undefined settings at runtime.)delimiter(")>operator(\))

  annotation(@deprecated)operator(()string<delimiter(")content(Use the other overload.)delimiter(")>operator(,) string<delimiter(")content(0.13.1)delimiter(")>operator(\))
  keyword(def) ident(Undefined)operator(()ident(definingKey)operator(:) ident(ScopedKey)operator([)ident(_)operator(])operator(,) ident(referencedKey)operator(:) ident(ScopedKey)operator([)ident(_)operator(])operator(,) ident(derived)operator(:) predefined_type(Boolean)operator(\))operator(:) ident(Undefined) operator(=)
    keyword(new) ident(Undefined)operator(()ident(fakeUndefinedSetting)operator(()ident(definingKey)operator(,) ident(derived)operator(\))operator(,) ident(referencedKey)operator(\))
  directive(private)operator([)local_variable(this)operator(]) keyword(def) ident(fakeUndefinedSetting)operator([)ident(T)operator(])operator(()ident(definingKey)operator(:) ident(ScopedKey)operator([)ident(T)operator(])operator(,) ident(d)operator(:) predefined_type(Boolean)operator(\))operator(:) ident(Setting)operator([)ident(T)operator(]) operator(=)
    operator({)
      keyword(val) ident(init)operator(:) ident(Initialize)operator([)ident(T)operator(]) operator(=) ident(pure)operator(()operator(()operator(\)) operator(=)operator(>) ident(sys)operator(.)ident(error)operator(()string<delimiter(")content(Dummy setting for compatibility only.)delimiter(")>operator(\))operator(\))
      keyword(new) ident(Setting)operator(()ident(definingKey)operator(,) ident(init)operator(,) ident(NoPosition)operator(\)) operator({) keyword(override) keyword(def) ident(isDerived) operator(=) ident(d) operator(})
    operator(})

  keyword(def) ident(Undefined)operator(()ident(defining)operator(:) ident(Setting)operator([)ident(_)operator(])operator(,) ident(referencedKey)operator(:) ident(ScopedKey)operator([)ident(_)operator(])operator(\))operator(:) ident(Undefined) operator(=) keyword(new) ident(Undefined)operator(()ident(defining)operator(,) ident(referencedKey)operator(\))
  keyword(def) ident(Uninitialized)operator(()ident(validKeys)operator(:) predefined_type(Seq)operator([)ident(ScopedKey)operator([)ident(_)operator(])operator(])operator(,) ident(delegates)operator(:) ident(Scope) operator(=)operator(>) predefined_type(Seq)operator([)ident(Scope)operator(])operator(,) ident(keys)operator(:) predefined_type(Seq)operator([)ident(Undefined)operator(])operator(,) ident(runtime)operator(:) predefined_type(Boolean)operator(\))operator(()keyword(implicit) ident(display)operator(:) ident(Show)operator([)ident(ScopedKey)operator([)ident(_)operator(])operator(])operator(\))operator(:) ident(Uninitialized) operator(=)
    operator({)
      ident(assert)operator(()operator(!)ident(keys)operator(.)ident(isEmpty)operator(\))
      keyword(val) ident(suffix) operator(=) keyword(if) operator(()ident(keys)operator(.)ident(length) operator(>) integer(1)operator(\)) string<delimiter(")content(s)delimiter(")> keyword(else) string<delimiter(")delimiter(")>
      keyword(val) ident(prefix) operator(=) keyword(if) operator(()ident(runtime)operator(\)) string<delimiter(")content(Runtime reference)delimiter(")> keyword(else) string<delimiter(")content(Reference)delimiter(")>
      keyword(val) ident(keysString) operator(=) ident(keys)operator(.)ident(map)operator(()ident(u) operator(=)operator(>) ident(showUndefined)operator(()ident(u)operator(,) ident(validKeys)operator(,) ident(delegates)operator(\))operator(\))operator(.)ident(mkString)operator(()string<delimiter(")char(\\n)char(\\n)content(  )delimiter(")>operator(,) string<delimiter(")char(\\n)char(\\n)content(  )delimiter(")>operator(,) string<delimiter(")delimiter(")>operator(\))
      keyword(new) ident(Uninitialized)operator(()ident(keys)operator(,) ident(prefix) operator(+) ident(suffix) operator(+) string<delimiter(")content( to undefined setting)delimiter(")> operator(+) ident(suffix) operator(+) string<delimiter(")content(: )delimiter(")> operator(+) ident(keysString) operator(+) string<delimiter(")char(\\n)content( )delimiter(")>operator(\))
    operator(})
  directive(final) type(class) class(Compiled)operator([)ident(T)operator(])operator(()keyword(val) ident(key)operator(:) ident(ScopedKey)operator([)ident(T)operator(])operator(,) keyword(val) ident(dependencies)operator(:) predefined_type(Iterable)operator([)ident(ScopedKey)operator([)ident(_)operator(])operator(])operator(,) keyword(val) ident(settings)operator(:) predefined_type(Seq)operator([)ident(Setting)operator([)ident(T)operator(])operator(])operator(\)) operator({)
    keyword(override) keyword(def) ident(toString) operator(=) ident(showFullKey)operator(()ident(key)operator(\))
  operator(})
  directive(final) type(class) class(Flattened)operator(()keyword(val) ident(key)operator(:) ident(ScopedKey)operator([)ident(_)operator(])operator(,) keyword(val) ident(dependencies)operator(:) predefined_type(Iterable)operator([)ident(ScopedKey)operator([)ident(_)operator(])operator(])operator(\))

  keyword(def) ident(flattenLocals)operator(()ident(compiled)operator(:) ident(CompiledMap)operator(\))operator(:) predefined_type(Map)operator([)ident(ScopedKey)operator([)ident(_)operator(])operator(,) ident(Flattened)operator(]) operator(=)
    operator({)
      keyword(import) ident(collection)operator(.)ident(breakOut)
      keyword(val) ident(locals) operator(=) ident(compiled) ident(flatMap) operator({) keyword(case) operator(()ident(key)operator(,) ident(comp)operator(\)) operator(=)operator(>) keyword(if) operator(()ident(key)operator(.)ident(key)operator(.)ident(isLocal)operator(\)) predefined_type(Seq)operator([)ident(Compiled)operator([)ident(_)operator(])operator(])operator(()ident(comp)operator(\)) keyword(else) predefined_type(Nil) operator(})
      keyword(val) ident(ordered) operator(=) ident(Dag)operator(.)ident(topologicalSort)operator(()ident(locals)operator(\))operator(()ident(_)operator(.)ident(dependencies)operator(.)ident(flatMap)operator(()ident(dep) operator(=)operator(>) keyword(if) operator(()ident(dep)operator(.)ident(key)operator(.)ident(isLocal)operator(\)) predefined_type(Seq)operator([)ident(Compiled)operator([)ident(_)operator(])operator(])operator(()ident(compiled)operator(()ident(dep)operator(\))operator(\)) keyword(else) predefined_type(Nil)operator(\))operator(\))
      keyword(def) ident(flatten)operator(()ident(cmap)operator(:) predefined_type(Map)operator([)ident(ScopedKey)operator([)ident(_)operator(])operator(,) ident(Flattened)operator(])operator(,) ident(key)operator(:) ident(ScopedKey)operator([)ident(_)operator(])operator(,) ident(deps)operator(:) predefined_type(Iterable)operator([)ident(ScopedKey)operator([)ident(_)operator(])operator(])operator(\))operator(:) ident(Flattened) operator(=)
        keyword(new) ident(Flattened)operator(()ident(key)operator(,) ident(deps)operator(.)ident(flatMap)operator(()ident(dep) operator(=)operator(>) keyword(if) operator(()ident(dep)operator(.)ident(key)operator(.)ident(isLocal)operator(\)) ident(cmap)operator(()ident(dep)operator(\))operator(.)ident(dependencies) keyword(else) ident(dep) operator(:)operator(:) predefined_type(Nil)operator(\))operator(\))

      keyword(val) ident(empty) operator(=) predefined_type(Map)operator(.)ident(empty)operator([)ident(ScopedKey)operator([)ident(_)operator(])operator(,) ident(Flattened)operator(])
      keyword(val) ident(flattenedLocals) operator(=) operator(()ident(empty) operator(/)operator(:) ident(ordered)operator(\)) operator({) operator(()ident(cmap)operator(,) ident(c)operator(\)) operator(=)operator(>) ident(cmap)operator(.)ident(updated)operator(()ident(c)operator(.)ident(key)operator(,) ident(flatten)operator(()ident(cmap)operator(,) ident(c)operator(.)ident(key)operator(,) ident(c)operator(.)ident(dependencies)operator(\))operator(\)) operator(})
      ident(compiled) ident(flatMap) operator({)
        keyword(case) operator(()ident(key)operator(,) ident(comp)operator(\)) operator(=)operator(>)
          keyword(if) operator(()ident(key)operator(.)ident(key)operator(.)ident(isLocal)operator(\))
            predefined_type(Nil)
          keyword(else)
            predefined_type(Seq)operator([)operator(()ident(ScopedKey)operator([)ident(_)operator(])operator(,) ident(Flattened)operator(\))operator(])operator(()operator(()ident(key)operator(,) ident(flatten)operator(()ident(flattenedLocals)operator(,) ident(key)operator(,) ident(comp)operator(.)ident(dependencies)operator(\))operator(\))operator(\))
      operator(})
    operator(})

  keyword(def) ident(definedAtString)operator(()ident(settings)operator(:) predefined_type(Seq)operator([)ident(Setting)operator([)ident(_)operator(])operator(])operator(\))operator(:) ident(String) operator(=)
    operator({)
      keyword(val) ident(posDefined) operator(=) ident(settings)operator(.)ident(flatMap)operator(()ident(_)operator(.)ident(positionString)operator(.)ident(toList)operator(\))
      keyword(if) operator(()ident(posDefined)operator(.)ident(size) operator(>) integer(0)operator(\)) operator({)
        keyword(val) ident(header) operator(=) keyword(if) operator(()ident(posDefined)operator(.)ident(size) operator(==) ident(settings)operator(.)ident(size)operator(\)) string<delimiter(")content(defined at:)delimiter(")> keyword(else)
          string<delimiter(")content(some of the defining occurrences:)delimiter(")>
        ident(header) operator(+) operator(()ident(posDefined)operator(.)ident(distinct) ident(mkString) operator(()string<delimiter(")char(\\n)char(\\t)delimiter(")>operator(,) string<delimiter(")char(\\n)char(\\t)delimiter(")>operator(,) string<delimiter(")char(\\n)delimiter(")>operator(\))operator(\))
      operator(}) keyword(else) string<delimiter(")delimiter(")>
    operator(})

  comment(/**
   * Intersects two scopes, returning the more specific one if they intersect, or None otherwise.
   */)
  directive(private)operator([)ident(sbt)operator(]) keyword(def) ident(intersect)operator(()ident(s1)operator(:) ident(Scope)operator(,) ident(s2)operator(:) ident(Scope)operator(\))operator(()keyword(implicit) ident(delegates)operator(:) ident(Scope) operator(=)operator(>) predefined_type(Seq)operator([)ident(Scope)operator(])operator(\))operator(:) predefined_type(Option)operator([)ident(Scope)operator(]) operator(=)
    keyword(if) operator(()ident(delegates)operator(()ident(s1)operator(\))operator(.)ident(contains)operator(()ident(s2)operator(\))operator(\)) predefined_type(Some)operator(()ident(s1)operator(\)) comment(// s1 is more specific)
    keyword(else) keyword(if) operator(()ident(delegates)operator(()ident(s2)operator(\))operator(.)ident(contains)operator(()ident(s1)operator(\))operator(\)) predefined_type(Some)operator(()ident(s2)operator(\)) comment(// s2 is more specific)
    keyword(else) predefined_type(None)

  directive(private)operator([)local_variable(this)operator(]) keyword(def) ident(deriveAndLocal)operator(()ident(init)operator(:) predefined_type(Seq)operator([)ident(Setting)operator([)ident(_)operator(])operator(])operator(\))operator(()keyword(implicit) ident(delegates)operator(:) ident(Scope) operator(=)operator(>) predefined_type(Seq)operator([)ident(Scope)operator(])operator(,) ident(scopeLocal)operator(:) ident(ScopeLocal)operator(\))operator(:) predefined_type(Seq)operator([)ident(Setting)operator([)ident(_)operator(])operator(]) operator(=)
    operator({)
      keyword(import) ident(collection)operator(.)ident(mutable)

      directive(final) type(class) class(Derived)operator(()keyword(val) ident(setting)operator(:) ident(DerivedSetting)operator([)ident(_)operator(])operator(\)) operator({)
        keyword(val) ident(dependencies) operator(=) ident(setting)operator(.)ident(dependencies)operator(.)ident(map)operator(()ident(_)operator(.)ident(key)operator(\))
        keyword(def) ident(triggeredBy) operator(=) ident(dependencies)operator(.)ident(filter)operator(()ident(setting)operator(.)ident(trigger)operator(\))
        keyword(val) ident(inScopes) operator(=) keyword(new) ident(mutable)operator(.)ident(HashSet)operator([)ident(Scope)operator(])
        keyword(val) ident(outputs) operator(=) keyword(new) ident(mutable)operator(.)ident(ListBuffer)operator([)ident(Setting)operator([)ident(_)operator(])operator(])
      operator(})
      directive(final) type(class) class(Deriveds)operator(()keyword(val) ident(key)operator(:) ident(AttributeKey)operator([)ident(_)operator(])operator(,) keyword(val) ident(settings)operator(:) ident(mutable)operator(.)ident(ListBuffer)operator([)ident(Derived)operator(])operator(\)) operator({)
        keyword(def) ident(dependencies) operator(=) ident(settings)operator(.)ident(flatMap)operator(()ident(_)operator(.)ident(dependencies)operator(\))
        comment(// This is mainly for use in the cyclic reference error message)
        keyword(override) keyword(def) ident(toString) operator(=) ident(s)string<delimiter(")content(Derived settings for ${key.label}, ${definedAtString(settings.map(_.setting\)\)})delimiter(")>
      operator(})

      comment(// separate `derived` settings from normal settings (`defs`\))
      keyword(val) operator(()ident(derived)operator(,) ident(rawDefs)operator(\)) operator(=) ident(Util)operator(.)ident(separate)operator([)ident(Setting)operator([)ident(_)operator(])operator(,) ident(Derived)operator(,) ident(Setting)operator([)ident(_)operator(])operator(])operator(()ident(init)operator(\)) operator({) keyword(case) ident(d)operator(:) ident(DerivedSetting)operator([)ident(_)operator(]) operator(=)operator(>) predefined_type(Left)operator(()keyword(new) ident(Derived)operator(()ident(d)operator(\))operator(\))operator(;) keyword(case) ident(s) operator(=)operator(>) predefined_type(Right)operator(()ident(s)operator(\)) operator(})
      keyword(val) ident(defs) operator(=) ident(addLocal)operator(()ident(rawDefs)operator(\))operator(()ident(scopeLocal)operator(\))

      comment(// group derived settings by the key they define)
      keyword(val) ident(derivsByDef) operator(=) keyword(new) ident(mutable)operator(.)ident(HashMap)operator([)ident(AttributeKey)operator([)ident(_)operator(])operator(,) ident(Deriveds)operator(])
      keyword(for) operator(()ident(s) operator(<)operator(-) ident(derived)operator(\)) operator({)
        keyword(val) ident(key) operator(=) ident(s)operator(.)ident(setting)operator(.)ident(key)operator(.)ident(key)
        ident(derivsByDef)operator(.)ident(getOrElseUpdate)operator(()ident(key)operator(,) keyword(new) ident(Deriveds)operator(()ident(key)operator(,) keyword(new) ident(mutable)operator(.)ident(ListBuffer)operator(\))operator(\))operator(.)ident(settings) operator(+=) ident(s)
      operator(})

      comment(// sort derived settings so that dependencies come first)
      comment(// this is necessary when verifying that a derived setting's dependencies exist)
      keyword(val) ident(ddeps) operator(=) operator(()ident(d)operator(:) ident(Deriveds)operator(\)) operator(=)operator(>) ident(d)operator(.)ident(dependencies)operator(.)ident(flatMap)operator(()ident(derivsByDef)operator(.)ident(get)operator(\))
      keyword(val) ident(sortedDerivs) operator(=) ident(Dag)operator(.)ident(topologicalSort)operator(()ident(derivsByDef)operator(.)ident(values)operator(\))operator(()ident(ddeps)operator(\))

      comment(// index derived settings by triggering key.  This maps a key to the list of settings potentially derived from it.)
      keyword(val) ident(derivedBy) operator(=) keyword(new) ident(mutable)operator(.)ident(HashMap)operator([)ident(AttributeKey)operator([)ident(_)operator(])operator(,) ident(mutable)operator(.)ident(ListBuffer)operator([)ident(Derived)operator(])operator(])
      keyword(for) operator(()ident(s) operator(<)operator(-) ident(derived)operator(;) ident(d) operator(<)operator(-) ident(s)operator(.)ident(triggeredBy)operator(\))
        ident(derivedBy)operator(.)ident(getOrElseUpdate)operator(()ident(d)operator(,) keyword(new) ident(mutable)operator(.)ident(ListBuffer)operator(\)) operator(+=) ident(s)

      comment(// Map a DerivedSetting[_] to the `Derived` struct wrapping it. Used to ultimately replace a DerivedSetting with)
      comment(// the `Setting`s that were actually derived from it: `Derived.outputs`)
      keyword(val) ident(derivedToStruct)operator(:) predefined_type(Map)operator([)ident(DerivedSetting)operator([)ident(_)operator(])operator(,) ident(Derived)operator(]) operator(=) operator(()ident(derived) ident(map) operator({) ident(s) operator(=)operator(>) ident(s)operator(.)ident(setting) operator(-)operator(>) ident(s) operator(})operator(\))operator(.)ident(toMap)

      comment(// set of defined scoped keys, used to ensure a derived setting is only added if all dependencies are present)
      keyword(val) ident(defined) operator(=) keyword(new) ident(mutable)operator(.)ident(HashSet)operator([)ident(ScopedKey)operator([)ident(_)operator(])operator(])
      keyword(def) ident(addDefs)operator(()ident(ss)operator(:) predefined_type(Seq)operator([)ident(Setting)operator([)ident(_)operator(])operator(])operator(\)) operator({) keyword(for) operator(()ident(s) operator(<)operator(-) ident(ss)operator(\)) ident(defined) operator(+=) ident(s)operator(.)ident(key) operator(})
      ident(addDefs)operator(()ident(defs)operator(\))

      comment(// true iff the scoped key is in `defined`, taking delegation into account)
      keyword(def) ident(isDefined)operator(()ident(key)operator(:) ident(AttributeKey)operator([)ident(_)operator(])operator(,) ident(scope)operator(:) ident(Scope)operator(\)) operator(=)
        ident(delegates)operator(()ident(scope)operator(\))operator(.)ident(exists)operator(()ident(s) operator(=)operator(>) ident(defined)operator(.)ident(contains)operator(()ident(ScopedKey)operator(()ident(s)operator(,) ident(key)operator(\))operator(\))operator(\))

      comment(// true iff all dependencies of derived setting `d` have a value (potentially via delegation\) in `scope`)
      keyword(def) ident(allDepsDefined)operator(()ident(d)operator(:) ident(Derived)operator(,) ident(scope)operator(:) ident(Scope)operator(,) ident(local)operator(:) predefined_type(Set)operator([)ident(AttributeKey)operator([)ident(_)operator(])operator(])operator(\))operator(:) predefined_type(Boolean) operator(=)
        ident(d)operator(.)ident(dependencies)operator(.)ident(forall)operator(()ident(dep) operator(=)operator(>) ident(local)operator(()ident(dep)operator(\)) operator(||) ident(isDefined)operator(()ident(dep)operator(,) ident(scope)operator(\))operator(\))

      comment(// Returns the list of injectable derived settings and their local settings for `sk`.)
      comment(// The settings are to be injected under `outputScope` = whichever scope is more specific of:)
      comment(//   * the dependency's (`sk`\) scope)
      comment(//   * the DerivedSetting's scope in which it has been declared, `definingScope`)
      comment(// provided that these two scopes intersect.)
      comment(//  A derived setting is injectable if:)
      comment(//   1. it has not been previously injected into outputScope)
      comment(//   2. it applies to outputScope (as determined by its `filter`\))
      comment(//   3. all of its dependencies are defined for outputScope (allowing for delegation\))
      comment(// This needs to handle local settings because a derived setting wouldn't be injected if it's local setting didn't exist yet.)
      keyword(val) ident(deriveFor) operator(=) operator(()ident(sk)operator(:) ident(ScopedKey)operator([)ident(_)operator(])operator(\)) operator(=)operator(>) operator({)
        keyword(val) ident(derivedForKey)operator(:) predefined_type(List)operator([)ident(Derived)operator(]) operator(=) ident(derivedBy)operator(.)ident(get)operator(()ident(sk)operator(.)ident(key)operator(\))operator(.)ident(toList)operator(.)ident(flatten)
        keyword(val) ident(scope) operator(=) ident(sk)operator(.)ident(scope)
        keyword(def) ident(localAndDerived)operator(()ident(d)operator(:) ident(Derived)operator(\))operator(:) predefined_type(Seq)operator([)ident(Setting)operator([)ident(_)operator(])operator(]) operator(=) operator({)
          keyword(def) ident(definingScope) operator(=) ident(d)operator(.)ident(setting)operator(.)ident(key)operator(.)ident(scope)
          keyword(val) ident(outputScope) operator(=) ident(intersect)operator(()ident(scope)operator(,) ident(definingScope)operator(\))
          ident(outputScope) ident(collect) operator({)
            keyword(case) ident(s) keyword(if) operator(!)ident(d)operator(.)ident(inScopes)operator(.)ident(contains)operator(()ident(s)operator(\)) operator(&&) ident(d)operator(.)ident(setting)operator(.)ident(filter)operator(()ident(s)operator(\)) operator(=)operator(>)
              keyword(val) ident(local) operator(=) ident(d)operator(.)ident(dependencies)operator(.)ident(flatMap)operator(()ident(dep) operator(=)operator(>) ident(scopeLocal)operator(()ident(ScopedKey)operator(()ident(s)operator(,) ident(dep)operator(\))operator(\))operator(\))
              keyword(if) operator(()ident(allDepsDefined)operator(()ident(d)operator(,) ident(s)operator(,) ident(local)operator(.)ident(map)operator(()ident(_)operator(.)ident(key)operator(.)ident(key)operator(\))operator(.)ident(toSet)operator(\))operator(\)) operator({)
                ident(d)operator(.)ident(inScopes)operator(.)ident(add)operator(()ident(s)operator(\))
                keyword(val) ident(out) operator(=) ident(local) operator(:)operator(+) ident(d)operator(.)ident(setting)operator(.)ident(setScope)operator(()ident(s)operator(\))
                ident(d)operator(.)ident(outputs) operator(++)operator(=) ident(out)
                ident(out)
              operator(}) keyword(else)
                predefined_type(Nil)
          operator(}) ident(getOrElse) predefined_type(Nil)
        operator(})
        ident(derivedForKey)operator(.)ident(flatMap)operator(()ident(localAndDerived)operator(\))
      operator(})

      keyword(val) ident(processed) operator(=) keyword(new) ident(mutable)operator(.)ident(HashSet)operator([)ident(ScopedKey)operator([)ident(_)operator(])operator(])

      comment(// derives settings, transitively so that a derived setting can trigger another)
      keyword(def) ident(process)operator(()ident(rem)operator(:) predefined_type(List)operator([)ident(Setting)operator([)ident(_)operator(])operator(])operator(\))operator(:) predefined_type(Unit) operator(=) ident(rem) keyword(match) operator({)
        keyword(case) ident(s) operator(:)operator(:) ident(ss) operator(=)operator(>)
          keyword(val) ident(sk) operator(=) ident(s)operator(.)ident(key)
          keyword(val) ident(ds) operator(=) keyword(if) operator(()ident(processed)operator(.)ident(add)operator(()ident(sk)operator(\))operator(\)) ident(deriveFor)operator(()ident(sk)operator(\)) keyword(else) predefined_type(Nil)
          ident(addDefs)operator(()ident(ds)operator(\))
          ident(process)operator(()ident(ds) operator(:)operator(:)operator(:) ident(ss)operator(\))
        keyword(case) predefined_type(Nil) operator(=)operator(>)
      operator(})
      ident(process)operator(()ident(defs)operator(.)ident(toList)operator(\))

      comment(// Take all the original defs and DerivedSettings along with locals, replace each DerivedSetting with the actual)
      comment(// settings that were derived.)
      keyword(val) ident(allDefs) operator(=) ident(addLocal)operator(()ident(init)operator(\))operator(()ident(scopeLocal)operator(\))
      ident(allDefs) ident(flatMap) operator({) keyword(case) ident(d)operator(:) ident(DerivedSetting)operator([)ident(_)operator(]) operator(=)operator(>) operator(()ident(derivedToStruct) ident(get) ident(d) ident(map) operator(()ident(_)operator(.)ident(outputs)operator(\))operator(\))operator(.)ident(toStream)operator(.)ident(flatten)operator(;) keyword(case) ident(s) operator(=)operator(>) predefined_type(Stream)operator(()ident(s)operator(\)) operator(})
    operator(})

  keyword(sealed) keyword(trait) class(Initialize)operator([)ident(T)operator(]) operator({)
    keyword(def) ident(dependencies)operator(:) predefined_type(Seq)operator([)ident(ScopedKey)operator([)ident(_)operator(])operator(])
    keyword(def) ident(apply)operator([)ident(S)operator(])operator(()ident(g)operator(:) ident(T) operator(=)operator(>) ident(S)operator(\))operator(:) ident(Initialize)operator([)ident(S)operator(])

    annotation(@deprecated)operator(()string<delimiter(")content(Will be made private.)delimiter(")>operator(,) string<delimiter(")content(0.13.2)delimiter(")>operator(\))
    keyword(def) ident(mapReferenced)operator(()ident(g)operator(:) ident(MapScoped)operator(\))operator(:) ident(Initialize)operator([)ident(T)operator(])
    annotation(@deprecated)operator(()string<delimiter(")content(Will be made private.)delimiter(")>operator(,) string<delimiter(")content(0.13.2)delimiter(")>operator(\))
    keyword(def) ident(mapConstant)operator(()ident(g)operator(:) ident(MapConstant)operator(\))operator(:) ident(Initialize)operator([)ident(T)operator(])

    annotation(@deprecated)operator(()string<delimiter(")content(Will be made private.)delimiter(")>operator(,) string<delimiter(")content(0.13.2)delimiter(")>operator(\))
    keyword(def) ident(validateReferenced)operator(()ident(g)operator(:) ident(ValidateRef)operator(\))operator(:) ident(ValidatedInit)operator([)ident(T)operator(]) operator(=)
      ident(validateKeyReferenced)operator(()keyword(new) ident(ValidateKeyRef) operator({) keyword(def) ident(apply)operator([)ident(T)operator(])operator(()ident(key)operator(:) ident(ScopedKey)operator([)ident(T)operator(])operator(,) ident(selfRefOk)operator(:) predefined_type(Boolean)operator(\)) operator(=) ident(g)operator(()ident(key)operator(\)) operator(})operator(\))

    directive(private)operator([)ident(sbt)operator(]) keyword(def) ident(validateKeyReferenced)operator(()ident(g)operator(:) ident(ValidateKeyRef)operator(\))operator(:) ident(ValidatedInit)operator([)ident(T)operator(])

    keyword(def) ident(evaluate)operator(()ident(map)operator(:) ident(Settings)operator([)ident(Scope)operator(])operator(\))operator(:) ident(T)
    keyword(def) ident(zip)operator([)ident(S)operator(])operator(()ident(o)operator(:) ident(Initialize)operator([)ident(S)operator(])operator(\))operator(:) ident(Initialize)operator([)operator(()ident(T)operator(,) ident(S)operator(\))operator(]) operator(=) ident(zipTupled)operator(()ident(o)operator(\))operator(()ident(idFun)operator(\))
    keyword(def) ident(zipWith)operator([)ident(S)operator(,) ident(U)operator(])operator(()ident(o)operator(:) ident(Initialize)operator([)ident(S)operator(])operator(\))operator(()ident(f)operator(:) operator(()ident(T)operator(,) ident(S)operator(\)) operator(=)operator(>) ident(U)operator(\))operator(:) ident(Initialize)operator([)ident(U)operator(]) operator(=) ident(zipTupled)operator(()ident(o)operator(\))operator(()ident(f)operator(.)ident(tupled)operator(\))
    directive(private)operator([)local_variable(this)operator(]) keyword(def) ident(zipTupled)operator([)ident(S)operator(,) ident(U)operator(])operator(()ident(o)operator(:) ident(Initialize)operator([)ident(S)operator(])operator(\))operator(()ident(f)operator(:) operator(()operator(()ident(T)operator(,) ident(S)operator(\))operator(\)) operator(=)operator(>) ident(U)operator(\))operator(:) ident(Initialize)operator([)ident(U)operator(]) operator(=)
      keyword(new) ident(Apply)operator([)operator(()operator({) keyword(type) ident(l)operator([)ident(L)operator([)ident(x)operator(])operator(]) operator(=) operator(()ident(L)operator([)ident(T)operator(])operator(,) ident(L)operator([)ident(S)operator(])operator(\)) operator(})operator(\))error(#)ident(l)operator(,) ident(U)operator(])operator(()ident(f)operator(,) operator(()local_variable(this)operator(,) ident(o)operator(\))operator(,) ident(AList)operator(.)ident(tuple2)operator([)ident(T)operator(,) ident(S)operator(])operator(\))
    comment(/** A fold on the static attributes of this and nested Initializes. */)
    directive(private)operator([)ident(sbt)operator(]) keyword(def) ident(processAttributes)operator([)ident(S)operator(])operator(()ident(init)operator(:) ident(S)operator(\))operator(()ident(f)operator(:) operator(()ident(S)operator(,) ident(AttributeMap)operator(\)) operator(=)operator(>) ident(S)operator(\))operator(:) ident(S)
  operator(})
  keyword(object) ident(Initialize) operator({)
    keyword(implicit) keyword(def) ident(joinInitialize)operator([)ident(T)operator(])operator(()ident(s)operator(:) predefined_type(Seq)operator([)ident(Initialize)operator([)ident(T)operator(])operator(])operator(\))operator(:) ident(JoinInitSeq)operator([)ident(T)operator(]) operator(=) keyword(new) ident(JoinInitSeq)operator(()ident(s)operator(\))
    directive(final) type(class) class(JoinInitSeq)operator([)ident(T)operator(])operator(()ident(s)operator(:) predefined_type(Seq)operator([)ident(Initialize)operator([)ident(T)operator(])operator(])operator(\)) operator({)
      keyword(def) ident(joinWith)operator([)ident(S)operator(])operator(()ident(f)operator(:) predefined_type(Seq)operator([)ident(T)operator(]) operator(=)operator(>) ident(S)operator(\))operator(:) ident(Initialize)operator([)ident(S)operator(]) operator(=) ident(uniform)operator(()ident(s)operator(\))operator(()ident(f)operator(\))
      keyword(def) ident(join)operator(:) ident(Initialize)operator([)predefined_type(Seq)operator([)ident(T)operator(])operator(]) operator(=) ident(uniform)operator(()ident(s)operator(\))operator(()ident(idFun)operator(\))
    operator(})
    keyword(def) ident(join)operator([)ident(T)operator(])operator(()ident(inits)operator(:) predefined_type(Seq)operator([)ident(Initialize)operator([)ident(T)operator(])operator(])operator(\))operator(:) ident(Initialize)operator([)predefined_type(Seq)operator([)ident(T)operator(])operator(]) operator(=) ident(uniform)operator(()ident(inits)operator(\))operator(()ident(idFun)operator(\))
    keyword(def) ident(joinAny)operator([)ident(M)operator([)ident(_)operator(])operator(])operator(()ident(inits)operator(:) predefined_type(Seq)operator([)ident(Initialize)operator([)ident(M)operator([)ident(T)operator(])operator(]) keyword(forSome) operator({) keyword(type) ident(T) operator(})operator(])operator(\))operator(:) ident(Initialize)operator([)predefined_type(Seq)operator([)ident(M)operator([)ident(_)operator(])operator(])operator(]) operator(=)
      ident(join)operator(()ident(inits)operator(.)ident(asInstanceOf)operator([)predefined_type(Seq)operator([)ident(Initialize)operator([)ident(M)operator([)predefined_type(Any)operator(])operator(])operator(])operator(])operator(\))operator(.)ident(asInstanceOf)operator([)ident(Initialize)operator([)predefined_type(Seq)operator([)ident(M)operator([)ident(T)operator(]) keyword(forSome) operator({) keyword(type) ident(T) operator(})operator(])operator(])operator(])
  operator(})
  keyword(object) ident(SettingsDefinition) operator({)
    keyword(implicit) keyword(def) ident(unwrapSettingsDefinition)operator(()ident(d)operator(:) ident(SettingsDefinition)operator(\))operator(:) predefined_type(Seq)operator([)ident(Setting)operator([)ident(_)operator(])operator(]) operator(=) ident(d)operator(.)ident(settings)
    keyword(implicit) keyword(def) ident(wrapSettingsDefinition)operator(()ident(ss)operator(:) predefined_type(Seq)operator([)ident(Setting)operator([)ident(_)operator(])operator(])operator(\))operator(:) ident(SettingsDefinition) operator(=) keyword(new) ident(SettingList)operator(()ident(ss)operator(\))
  operator(})
  keyword(sealed) keyword(trait) class(SettingsDefinition) operator({)
    keyword(def) ident(settings)operator(:) predefined_type(Seq)operator([)ident(Setting)operator([)ident(_)operator(])operator(])
  operator(})
  directive(final) type(class) class(SettingList)operator(()keyword(val) ident(settings)operator(:) predefined_type(Seq)operator([)ident(Setting)operator([)ident(_)operator(])operator(])operator(\)) directive(extends) ident(SettingsDefinition)
  keyword(sealed) type(class) class(Setting)operator([)ident(T)operator(]) directive(private)operator([)ident(Init)operator(]) operator(()keyword(val) ident(key)operator(:) ident(ScopedKey)operator([)ident(T)operator(])operator(,) keyword(val) ident(init)operator(:) ident(Initialize)operator([)ident(T)operator(])operator(,) keyword(val) ident(pos)operator(:) ident(SourcePosition)operator(\)) directive(extends) ident(SettingsDefinition) operator({)
    keyword(def) ident(settings) operator(=) local_variable(this) operator(:)operator(:) predefined_type(Nil)
    keyword(def) ident(definitive)operator(:) predefined_type(Boolean) operator(=) operator(!)ident(init)operator(.)ident(dependencies)operator(.)ident(contains)operator(()ident(key)operator(\))
    keyword(def) ident(dependencies)operator(:) predefined_type(Seq)operator([)ident(ScopedKey)operator([)ident(_)operator(])operator(]) operator(=) ident(remove)operator(()ident(init)operator(.)ident(dependencies)operator(,) ident(key)operator(\))
    annotation(@deprecated)operator(()string<delimiter(")content(Will be made private.)delimiter(")>operator(,) string<delimiter(")content(0.13.2)delimiter(")>operator(\))
    keyword(def) ident(mapReferenced)operator(()ident(g)operator(:) ident(MapScoped)operator(\))operator(:) ident(Setting)operator([)ident(T)operator(]) operator(=) ident(make)operator(()ident(key)operator(,) ident(init) ident(mapReferenced) ident(g)operator(,) ident(pos)operator(\))
    annotation(@deprecated)operator(()string<delimiter(")content(Will be made private.)delimiter(")>operator(,) string<delimiter(")content(0.13.2)delimiter(")>operator(\))
    keyword(def) ident(validateReferenced)operator(()ident(g)operator(:) ident(ValidateRef)operator(\))operator(:) predefined_type(Either)operator([)predefined_type(Seq)operator([)ident(Undefined)operator(])operator(,) ident(Setting)operator([)ident(T)operator(])operator(]) operator(=) operator(()ident(init) ident(validateReferenced) ident(g)operator(\))operator(.)ident(right)operator(.)ident(map)operator(()ident(newI) operator(=)operator(>) ident(make)operator(()ident(key)operator(,) ident(newI)operator(,) ident(pos)operator(\))operator(\))

    directive(private)operator([)ident(sbt)operator(]) keyword(def) ident(validateKeyReferenced)operator(()ident(g)operator(:) ident(ValidateKeyRef)operator(\))operator(:) predefined_type(Either)operator([)predefined_type(Seq)operator([)ident(Undefined)operator(])operator(,) ident(Setting)operator([)ident(T)operator(])operator(]) operator(=)
      operator(()ident(init) ident(validateKeyReferenced) ident(g)operator(\))operator(.)ident(right)operator(.)ident(map)operator(()ident(newI) operator(=)operator(>) ident(make)operator(()ident(key)operator(,) ident(newI)operator(,) ident(pos)operator(\))operator(\))

    keyword(def) ident(mapKey)operator(()ident(g)operator(:) ident(MapScoped)operator(\))operator(:) ident(Setting)operator([)ident(T)operator(]) operator(=) ident(make)operator(()ident(g)operator(()ident(key)operator(\))operator(,) ident(init)operator(,) ident(pos)operator(\))
    keyword(def) ident(mapInit)operator(()ident(f)operator(:) operator(()ident(ScopedKey)operator([)ident(T)operator(])operator(,) ident(T)operator(\)) operator(=)operator(>) ident(T)operator(\))operator(:) ident(Setting)operator([)ident(T)operator(]) operator(=) ident(make)operator(()ident(key)operator(,) ident(init)operator(()ident(t) operator(=)operator(>) ident(f)operator(()ident(key)operator(,) ident(t)operator(\))operator(\))operator(,) ident(pos)operator(\))
    annotation(@deprecated)operator(()string<delimiter(")content(Will be made private.)delimiter(")>operator(,) string<delimiter(")content(0.13.2)delimiter(")>operator(\))
    keyword(def) ident(mapConstant)operator(()ident(g)operator(:) ident(MapConstant)operator(\))operator(:) ident(Setting)operator([)ident(T)operator(]) operator(=) ident(make)operator(()ident(key)operator(,) ident(init) ident(mapConstant) ident(g)operator(,) ident(pos)operator(\))
    keyword(def) ident(withPos)operator(()ident(pos)operator(:) ident(SourcePosition)operator(\)) operator(=) ident(make)operator(()ident(key)operator(,) ident(init)operator(,) ident(pos)operator(\))
    keyword(def) ident(positionString)operator(:) predefined_type(Option)operator([)ident(String)operator(]) operator(=) ident(pos) keyword(match) operator({)
      keyword(case) ident(pos)operator(:) ident(FilePosition) operator(=)operator(>) predefined_type(Some)operator(()ident(pos)operator(.)ident(path) operator(+) string<delimiter(")content(:)delimiter(")> operator(+) ident(pos)operator(.)ident(startLine)operator(\))
      keyword(case) ident(NoPosition)        operator(=)operator(>) predefined_type(None)
    operator(})
    directive(private)operator([)ident(sbt)operator(]) keyword(def) ident(mapInitialize)operator(()ident(f)operator(:) ident(Initialize)operator([)ident(T)operator(]) operator(=)operator(>) ident(Initialize)operator([)ident(T)operator(])operator(\))operator(:) ident(Setting)operator([)ident(T)operator(]) operator(=) ident(make)operator(()ident(key)operator(,) ident(f)operator(()ident(init)operator(\))operator(,) ident(pos)operator(\))
    keyword(override) keyword(def) ident(toString) operator(=) string<delimiter(")content(setting()delimiter(")> operator(+) ident(key) operator(+) string<delimiter(")content(\) at )delimiter(")> operator(+) ident(pos)

    directive(protected)operator([)local_variable(this)operator(]) keyword(def) ident(make)operator([)ident(T)operator(])operator(()ident(key)operator(:) ident(ScopedKey)operator([)ident(T)operator(])operator(,) ident(init)operator(:) ident(Initialize)operator([)ident(T)operator(])operator(,) ident(pos)operator(:) ident(SourcePosition)operator(\))operator(:) ident(Setting)operator([)ident(T)operator(]) operator(=) keyword(new) ident(Setting)operator([)ident(T)operator(])operator(()ident(key)operator(,) ident(init)operator(,) ident(pos)operator(\))
    directive(protected)operator([)ident(sbt)operator(]) keyword(def) ident(isDerived)operator(:) predefined_type(Boolean) operator(=) predefined_constant(false)
    directive(private)operator([)ident(sbt)operator(]) keyword(def) ident(setScope)operator(()ident(s)operator(:) ident(Scope)operator(\))operator(:) ident(Setting)operator([)ident(T)operator(]) operator(=) ident(make)operator(()ident(key)operator(.)ident(copy)operator(()ident(scope) operator(=) ident(s)operator(\))operator(,) ident(init)operator(.)ident(mapReferenced)operator(()ident(mapScope)operator(()reserved(const)operator(()ident(s)operator(\))operator(\))operator(\))operator(,) ident(pos)operator(\))
    comment(/** Turn this setting into a `DefaultSetting` if it's not already, otherwise returns `this` */)
    directive(private)operator([)ident(sbt)operator(]) keyword(def) ident(default)operator(()ident(id)operator(:) operator(=)operator(>) predefined_type(Long) operator(=) ident(nextDefaultID)operator(()operator(\))operator(\))operator(:) ident(DefaultSetting)operator([)ident(T)operator(]) operator(=) ident(DefaultSetting)operator(()ident(key)operator(,) ident(init)operator(,) ident(pos)operator(,) ident(id)operator(\))
  operator(})
  directive(private)operator([)ident(Init)operator(]) keyword(sealed) type(class) class(DerivedSetting)operator([)ident(T)operator(])operator(()ident(sk)operator(:) ident(ScopedKey)operator([)ident(T)operator(])operator(,) ident(i)operator(:) ident(Initialize)operator([)ident(T)operator(])operator(,) ident(p)operator(:) ident(SourcePosition)operator(,) keyword(val) ident(filter)operator(:) ident(Scope) operator(=)operator(>) predefined_type(Boolean)operator(,) keyword(val) ident(trigger)operator(:) ident(AttributeKey)operator([)ident(_)operator(]) operator(=)operator(>) predefined_type(Boolean)operator(\)) directive(extends) ident(Setting)operator([)ident(T)operator(])operator(()ident(sk)operator(,) ident(i)operator(,) ident(p)operator(\)) operator({)
    keyword(override) keyword(def) ident(make)operator([)ident(T)operator(])operator(()ident(key)operator(:) ident(ScopedKey)operator([)ident(T)operator(])operator(,) ident(init)operator(:) ident(Initialize)operator([)ident(T)operator(])operator(,) ident(pos)operator(:) ident(SourcePosition)operator(\))operator(:) ident(Setting)operator([)ident(T)operator(]) operator(=) keyword(new) ident(DerivedSetting)operator([)ident(T)operator(])operator(()ident(key)operator(,) ident(init)operator(,) ident(pos)operator(,) ident(filter)operator(,) ident(trigger)operator(\))
    directive(protected)operator([)ident(sbt)operator(]) keyword(override) keyword(def) ident(isDerived)operator(:) predefined_type(Boolean) operator(=) predefined_constant(true)
    keyword(override) keyword(def) ident(default)operator(()ident(_id)operator(:) operator(=)operator(>) predefined_type(Long)operator(\))operator(:) ident(DefaultSetting)operator([)ident(T)operator(]) operator(=) keyword(new) ident(DerivedSetting)operator([)ident(T)operator(])operator(()ident(sk)operator(,) ident(i)operator(,) ident(p)operator(,) ident(filter)operator(,) ident(trigger)operator(\)) keyword(with) ident(DefaultSetting)operator([)ident(T)operator(]) operator({) keyword(val) ident(id) operator(=) ident(_id) operator(})
    keyword(override) keyword(def) ident(toString) operator(=) string<delimiter(")content(derived )delimiter(")> operator(+) local_variable(super)operator(.)ident(toString)
  operator(})
  comment(// Only keep the first occurence of this setting and move it to the front so that it has lower precedence than non-defaults.)
  comment(//  This is intended for internal sbt use only, where alternatives like Plugin.globalSettings are not available.)
  directive(private)operator([)ident(Init)operator(]) keyword(sealed) keyword(trait) class(DefaultSetting)operator([)ident(T)operator(]) directive(extends) ident(Setting)operator([)ident(T)operator(]) operator({)
    keyword(val) ident(id)operator(:) predefined_type(Long)
    keyword(override) keyword(def) ident(make)operator([)ident(T)operator(])operator(()ident(key)operator(:) ident(ScopedKey)operator([)ident(T)operator(])operator(,) ident(init)operator(:) ident(Initialize)operator([)ident(T)operator(])operator(,) ident(pos)operator(:) ident(SourcePosition)operator(\))operator(:) ident(Setting)operator([)ident(T)operator(]) operator(=) local_variable(super)operator(.)ident(make)operator(()ident(key)operator(,) ident(init)operator(,) ident(pos)operator(\)) ident(default) ident(id)
    keyword(override) directive(final) keyword(def) ident(hashCode) operator(=) ident(id)operator(.)ident(hashCode)
    keyword(override) directive(final) keyword(def) ident(equals)operator(()ident(o)operator(:) predefined_type(Any)operator(\))operator(:) predefined_type(Boolean) operator(=) ident(o) keyword(match) operator({) keyword(case) ident(d)operator(:) ident(DefaultSetting)operator([)ident(_)operator(]) operator(=)operator(>) ident(d)operator(.)ident(id) operator(==) ident(id)operator(;) keyword(case) ident(_) operator(=)operator(>) predefined_constant(false) operator(})
    keyword(override) keyword(def) ident(toString) operator(=) ident(s)string<delimiter(")content(default($id\) )delimiter(")> operator(+) local_variable(super)operator(.)ident(toString)
    keyword(override) keyword(def) ident(default)operator(()ident(id)operator(:) operator(=)operator(>) predefined_type(Long)operator(\)) operator(=) local_variable(this)
  operator(})

  keyword(object) ident(DefaultSetting) operator({)
    keyword(def) ident(apply)operator([)ident(T)operator(])operator(()ident(sk)operator(:) ident(ScopedKey)operator([)ident(T)operator(])operator(,) ident(i)operator(:) ident(Initialize)operator([)ident(T)operator(])operator(,) ident(p)operator(:) ident(SourcePosition)operator(,) ident(_id)operator(:) predefined_type(Long)operator(\)) operator(=) keyword(new) ident(Setting)operator([)ident(T)operator(])operator(()ident(sk)operator(,) ident(i)operator(,) ident(p)operator(\)) keyword(with) ident(DefaultSetting)operator([)ident(T)operator(]) operator({) keyword(val) ident(id) operator(=) ident(_id) operator(})
  operator(})

  directive(private)operator([)local_variable(this)operator(]) keyword(def) ident(handleUndefined)operator([)ident(T)operator(])operator(()ident(vr)operator(:) ident(ValidatedInit)operator([)ident(T)operator(])operator(\))operator(:) ident(Initialize)operator([)ident(T)operator(]) operator(=) ident(vr) keyword(match) operator({)
    keyword(case) predefined_type(Left)operator(()ident(undefs)operator(\)) operator(=)operator(>) keyword(throw) keyword(new) ident(RuntimeUndefined)operator(()ident(undefs)operator(\))
    keyword(case) predefined_type(Right)operator(()ident(x)operator(\))     operator(=)operator(>) ident(x)
  operator(})

  directive(private)operator([)local_variable(this)operator(]) keyword(lazy) keyword(val) ident(getValidated) operator(=)
    keyword(new) operator(()ident(ValidatedInit) operator(~)operator(>) ident(Initialize)operator(\)) operator({) keyword(def) ident(apply)operator([)ident(T)operator(])operator(()ident(v)operator(:) ident(ValidatedInit)operator([)ident(T)operator(])operator(\)) operator(=) ident(handleUndefined)operator([)ident(T)operator(])operator(()ident(v)operator(\)) operator(})

  comment(// mainly for reducing generated class count)
  directive(private)operator([)local_variable(this)operator(]) keyword(def) ident(validateKeyReferencedT)operator(()ident(g)operator(:) ident(ValidateKeyRef)operator(\)) operator(=)
    keyword(new) operator(()ident(Initialize) operator(~)operator(>) ident(ValidatedInit)operator(\)) operator({) keyword(def) ident(apply)operator([)ident(T)operator(])operator(()ident(i)operator(:) ident(Initialize)operator([)ident(T)operator(])operator(\)) operator(=) ident(i) ident(validateKeyReferenced) ident(g) operator(})

  directive(private)operator([)local_variable(this)operator(]) keyword(def) ident(mapReferencedT)operator(()ident(g)operator(:) ident(MapScoped)operator(\)) operator(=)
    keyword(new) operator(()ident(Initialize) operator(~)operator(>) ident(Initialize)operator(\)) operator({) keyword(def) ident(apply)operator([)ident(T)operator(])operator(()ident(i)operator(:) ident(Initialize)operator([)ident(T)operator(])operator(\)) operator(=) ident(i) ident(mapReferenced) ident(g) operator(})

  directive(private)operator([)local_variable(this)operator(]) keyword(def) ident(mapConstantT)operator(()ident(g)operator(:) ident(MapConstant)operator(\)) operator(=)
    keyword(new) operator(()ident(Initialize) operator(~)operator(>) ident(Initialize)operator(\)) operator({) keyword(def) ident(apply)operator([)ident(T)operator(])operator(()ident(i)operator(:) ident(Initialize)operator([)ident(T)operator(])operator(\)) operator(=) ident(i) ident(mapConstant) ident(g) operator(})

  directive(private)operator([)local_variable(this)operator(]) keyword(def) ident(evaluateT)operator(()ident(g)operator(:) ident(Settings)operator([)ident(Scope)operator(])operator(\)) operator(=)
    keyword(new) operator(()ident(Initialize) operator(~)operator(>) ident(Id)operator(\)) operator({) keyword(def) ident(apply)operator([)ident(T)operator(])operator(()ident(i)operator(:) ident(Initialize)operator([)ident(T)operator(])operator(\)) operator(=) ident(i) ident(evaluate) ident(g) operator(})

  directive(private)operator([)local_variable(this)operator(]) keyword(def) ident(deps)operator(()ident(ls)operator(:) predefined_type(Seq)operator([)ident(Initialize)operator([)ident(_)operator(])operator(])operator(\))operator(:) predefined_type(Seq)operator([)ident(ScopedKey)operator([)ident(_)operator(])operator(]) operator(=) ident(ls)operator(.)ident(flatMap)operator(()ident(_)operator(.)ident(dependencies)operator(\))

  keyword(sealed) keyword(trait) class(Keyed)operator([)ident(S)operator(,) ident(T)operator(]) directive(extends) ident(Initialize)operator([)ident(T)operator(]) operator({)
    keyword(def) ident(scopedKey)operator(:) ident(ScopedKey)operator([)ident(S)operator(])
    keyword(def) ident(transform)operator(:) ident(S) operator(=)operator(>) ident(T)
    directive(final) keyword(def) ident(dependencies) operator(=) ident(scopedKey) operator(:)operator(:) predefined_type(Nil)
    directive(final) keyword(def) ident(apply)operator([)ident(Z)operator(])operator(()ident(g)operator(:) ident(T) operator(=)operator(>) ident(Z)operator(\))operator(:) ident(Initialize)operator([)ident(Z)operator(]) operator(=) keyword(new) ident(GetValue)operator(()ident(scopedKey)operator(,) ident(g) ident(compose) ident(transform)operator(\))
    directive(final) keyword(def) ident(evaluate)operator(()ident(ss)operator(:) ident(Settings)operator([)ident(Scope)operator(])operator(\))operator(:) ident(T) operator(=) ident(transform)operator(()ident(getValue)operator(()ident(ss)operator(,) ident(scopedKey)operator(\))operator(\))
    directive(final) keyword(def) ident(mapReferenced)operator(()ident(g)operator(:) ident(MapScoped)operator(\))operator(:) ident(Initialize)operator([)ident(T)operator(]) operator(=) keyword(new) ident(GetValue)operator(()ident(g)operator(()ident(scopedKey)operator(\))operator(,) ident(transform)operator(\))
    directive(private)operator([)ident(sbt)operator(]) directive(final) keyword(def) ident(validateKeyReferenced)operator(()ident(g)operator(:) ident(ValidateKeyRef)operator(\))operator(:) ident(ValidatedInit)operator([)ident(T)operator(]) operator(=) ident(g)operator(()ident(scopedKey)operator(,) predefined_constant(false)operator(\)) keyword(match) operator({)
      keyword(case) predefined_type(Left)operator(()ident(un)operator(\))  operator(=)operator(>) predefined_type(Left)operator(()ident(un) operator(:)operator(:) predefined_type(Nil)operator(\))
      keyword(case) predefined_type(Right)operator(()ident(nk)operator(\)) operator(=)operator(>) predefined_type(Right)operator(()keyword(new) ident(GetValue)operator(()ident(nk)operator(,) ident(transform)operator(\))operator(\))
    operator(})
    directive(final) keyword(def) ident(mapConstant)operator(()ident(g)operator(:) ident(MapConstant)operator(\))operator(:) ident(Initialize)operator([)ident(T)operator(]) operator(=) ident(g)operator(()ident(scopedKey)operator(\)) keyword(match) operator({)
      keyword(case) predefined_type(None)        operator(=)operator(>) local_variable(this)
      keyword(case) predefined_type(Some)operator(()reserved(const)operator(\)) operator(=)operator(>) keyword(new) ident(Value)operator(()operator(()operator(\)) operator(=)operator(>) ident(transform)operator(()reserved(const)operator(\))operator(\))
    operator(})
    directive(private)operator([)ident(sbt)operator(]) keyword(def) ident(processAttributes)operator([)ident(S)operator(])operator(()ident(init)operator(:) ident(S)operator(\))operator(()ident(f)operator(:) operator(()ident(S)operator(,) ident(AttributeMap)operator(\)) operator(=)operator(>) ident(S)operator(\))operator(:) ident(S) operator(=) ident(init)
  operator(})
  directive(private)operator([)local_variable(this)operator(]) directive(final) type(class) class(GetValue)operator([)ident(S)operator(,) ident(T)operator(])operator(()keyword(val) ident(scopedKey)operator(:) ident(ScopedKey)operator([)ident(S)operator(])operator(,) keyword(val) ident(transform)operator(:) ident(S) operator(=)operator(>) ident(T)operator(\)) directive(extends) ident(Keyed)operator([)ident(S)operator(,) ident(T)operator(])
  keyword(trait) class(KeyedInitialize)operator([)ident(T)operator(]) directive(extends) ident(Keyed)operator([)ident(T)operator(,) ident(T)operator(]) operator({)
    directive(final) keyword(val) ident(transform) operator(=) ident(idFun)operator([)ident(T)operator(])
  operator(})

  directive(private)operator([)ident(sbt)operator(]) directive(final) type(class) class(TransformCapture)operator(()keyword(val) ident(f)operator(:) ident(Initialize) operator(~)operator(>) ident(Initialize)operator(\)) directive(extends) ident(Initialize)operator([)ident(Initialize) operator(~)operator(>) ident(Initialize)operator(]) operator({)
    keyword(def) ident(dependencies) operator(=) predefined_type(Nil)
    keyword(def) ident(apply)operator([)ident(Z)operator(])operator(()ident(g2)operator(:) operator(()ident(Initialize) operator(~)operator(>) ident(Initialize)operator(\)) operator(=)operator(>) ident(Z)operator(\))operator(:) ident(Initialize)operator([)ident(Z)operator(]) operator(=) ident(map)operator(()local_variable(this)operator(\))operator(()ident(g2)operator(\))
    keyword(def) ident(evaluate)operator(()ident(ss)operator(:) ident(Settings)operator([)ident(Scope)operator(])operator(\))operator(:) ident(Initialize) operator(~)operator(>) ident(Initialize) operator(=) ident(f)
    keyword(def) ident(mapReferenced)operator(()ident(g)operator(:) ident(MapScoped)operator(\)) operator(=) keyword(new) ident(TransformCapture)operator(()ident(mapReferencedT)operator(()ident(g)operator(\)) error(∙) ident(f)operator(\))
    keyword(def) ident(mapConstant)operator(()ident(g)operator(:) ident(MapConstant)operator(\)) operator(=) keyword(new) ident(TransformCapture)operator(()ident(mapConstantT)operator(()ident(g)operator(\)) error(∙) ident(f)operator(\))
    keyword(def) ident(validateKeyReferenced)operator(()ident(g)operator(:) ident(ValidateKeyRef)operator(\)) operator(=) predefined_type(Right)operator(()keyword(new) ident(TransformCapture)operator(()ident(getValidated) error(∙) ident(validateKeyReferencedT)operator(()ident(g)operator(\)) error(∙) ident(f)operator(\))operator(\))
    directive(private)operator([)ident(sbt)operator(]) keyword(def) ident(processAttributes)operator([)ident(S)operator(])operator(()ident(init)operator(:) ident(S)operator(\))operator(()ident(f)operator(:) operator(()ident(S)operator(,) ident(AttributeMap)operator(\)) operator(=)operator(>) ident(S)operator(\))operator(:) ident(S) operator(=) ident(init)
  operator(})
  directive(private)operator([)ident(sbt)operator(]) directive(final) type(class) class(ValidationCapture)operator([)ident(T)operator(])operator(()keyword(val) ident(key)operator(:) ident(ScopedKey)operator([)ident(T)operator(])operator(,) keyword(val) ident(selfRefOk)operator(:) predefined_type(Boolean)operator(\)) directive(extends) ident(Initialize)operator([)ident(ScopedKey)operator([)ident(T)operator(])operator(]) operator({)
    keyword(def) ident(dependencies) operator(=) predefined_type(Nil)
    keyword(def) ident(apply)operator([)ident(Z)operator(])operator(()ident(g2)operator(:) ident(ScopedKey)operator([)ident(T)operator(]) operator(=)operator(>) ident(Z)operator(\))operator(:) ident(Initialize)operator([)ident(Z)operator(]) operator(=) ident(map)operator(()local_variable(this)operator(\))operator(()ident(g2)operator(\))
    keyword(def) ident(evaluate)operator(()ident(ss)operator(:) ident(Settings)operator([)ident(Scope)operator(])operator(\)) operator(=) ident(key)
    keyword(def) ident(mapReferenced)operator(()ident(g)operator(:) ident(MapScoped)operator(\)) operator(=) keyword(new) ident(ValidationCapture)operator(()ident(g)operator(()ident(key)operator(\))operator(,) ident(selfRefOk)operator(\))
    keyword(def) ident(mapConstant)operator(()ident(g)operator(:) ident(MapConstant)operator(\)) operator(=) local_variable(this)
    keyword(def) ident(validateKeyReferenced)operator(()ident(g)operator(:) ident(ValidateKeyRef)operator(\)) operator(=) ident(g)operator(()ident(key)operator(,) ident(selfRefOk)operator(\)) keyword(match) operator({)
      keyword(case) predefined_type(Left)operator(()ident(un)operator(\)) operator(=)operator(>) predefined_type(Left)operator(()ident(un) operator(:)operator(:) predefined_type(Nil)operator(\))
      keyword(case) predefined_type(Right)operator(()ident(k)operator(\)) operator(=)operator(>) predefined_type(Right)operator(()keyword(new) ident(ValidationCapture)operator(()ident(k)operator(,) ident(selfRefOk)operator(\))operator(\))
    operator(})

    directive(private)operator([)ident(sbt)operator(]) keyword(def) ident(processAttributes)operator([)ident(S)operator(])operator(()ident(init)operator(:) ident(S)operator(\))operator(()ident(f)operator(:) operator(()ident(S)operator(,) ident(AttributeMap)operator(\)) operator(=)operator(>) ident(S)operator(\))operator(:) ident(S) operator(=) ident(init)
  operator(})
  directive(private)operator([)ident(sbt)operator(]) directive(final) type(class) class(Bind)operator([)ident(S)operator(,) ident(T)operator(])operator(()keyword(val) ident(f)operator(:) ident(S) operator(=)operator(>) ident(Initialize)operator([)ident(T)operator(])operator(,) keyword(val) ident(in)operator(:) ident(Initialize)operator([)ident(S)operator(])operator(\)) directive(extends) ident(Initialize)operator([)ident(T)operator(]) operator({)
    keyword(def) ident(dependencies) operator(=) ident(in)operator(.)ident(dependencies)
    keyword(def) ident(apply)operator([)ident(Z)operator(])operator(()ident(g)operator(:) ident(T) operator(=)operator(>) ident(Z)operator(\))operator(:) ident(Initialize)operator([)ident(Z)operator(]) operator(=) keyword(new) ident(Bind)operator([)ident(S)operator(,) ident(Z)operator(])operator(()ident(s) operator(=)operator(>) ident(f)operator(()ident(s)operator(\))operator(()ident(g)operator(\))operator(,) ident(in)operator(\))
    keyword(def) ident(evaluate)operator(()ident(ss)operator(:) ident(Settings)operator([)ident(Scope)operator(])operator(\))operator(:) ident(T) operator(=) ident(f)operator(()ident(in) ident(evaluate) ident(ss)operator(\)) ident(evaluate) ident(ss)
    keyword(def) ident(mapReferenced)operator(()ident(g)operator(:) ident(MapScoped)operator(\)) operator(=) keyword(new) ident(Bind)operator([)ident(S)operator(,) ident(T)operator(])operator(()ident(s) operator(=)operator(>) ident(f)operator(()ident(s)operator(\)) ident(mapReferenced) ident(g)operator(,) ident(in) ident(mapReferenced) ident(g)operator(\))
    keyword(def) ident(validateKeyReferenced)operator(()ident(g)operator(:) ident(ValidateKeyRef)operator(\)) operator(=) operator(()ident(in) ident(validateKeyReferenced) ident(g)operator(\))operator(.)ident(right)operator(.)ident(map) operator({) ident(validIn) operator(=)operator(>)
      keyword(new) ident(Bind)operator([)ident(S)operator(,) ident(T)operator(])operator(()ident(s) operator(=)operator(>) ident(handleUndefined)operator(()ident(f)operator(()ident(s)operator(\)) ident(validateKeyReferenced) ident(g)operator(\))operator(,) ident(validIn)operator(\))
    operator(})
    keyword(def) ident(mapConstant)operator(()ident(g)operator(:) ident(MapConstant)operator(\)) operator(=) keyword(new) ident(Bind)operator([)ident(S)operator(,) ident(T)operator(])operator(()ident(s) operator(=)operator(>) ident(f)operator(()ident(s)operator(\)) ident(mapConstant) ident(g)operator(,) ident(in) ident(mapConstant) ident(g)operator(\))
    directive(private)operator([)ident(sbt)operator(]) keyword(def) ident(processAttributes)operator([)ident(S)operator(])operator(()ident(init)operator(:) ident(S)operator(\))operator(()ident(f)operator(:) operator(()ident(S)operator(,) ident(AttributeMap)operator(\)) operator(=)operator(>) ident(S)operator(\))operator(:) ident(S) operator(=) ident(in)operator(.)ident(processAttributes)operator(()ident(init)operator(\))operator(()ident(f)operator(\))
  operator(})
  directive(private)operator([)ident(sbt)operator(]) directive(final) type(class) class(Optional)operator([)ident(S)operator(,) ident(T)operator(])operator(()keyword(val) ident(a)operator(:) predefined_type(Option)operator([)ident(Initialize)operator([)ident(S)operator(])operator(])operator(,) keyword(val) ident(f)operator(:) predefined_type(Option)operator([)ident(S)operator(]) operator(=)operator(>) ident(T)operator(\)) directive(extends) ident(Initialize)operator([)ident(T)operator(]) operator({)
    keyword(def) ident(dependencies) operator(=) ident(deps)operator(()ident(a)operator(.)ident(toList)operator(\))
    keyword(def) ident(apply)operator([)ident(Z)operator(])operator(()ident(g)operator(:) ident(T) operator(=)operator(>) ident(Z)operator(\))operator(:) ident(Initialize)operator([)ident(Z)operator(]) operator(=) keyword(new) ident(Optional)operator([)ident(S)operator(,) ident(Z)operator(])operator(()ident(a)operator(,) ident(g) ident(compose) ident(f)operator(\))
    keyword(def) ident(mapReferenced)operator(()ident(g)operator(:) ident(MapScoped)operator(\)) operator(=) keyword(new) ident(Optional)operator(()ident(a) ident(map) ident(mapReferencedT)operator(()ident(g)operator(\))operator(.)ident(fn)operator(,) ident(f)operator(\))
    keyword(def) ident(validateKeyReferenced)operator(()ident(g)operator(:) ident(ValidateKeyRef)operator(\)) operator(=) ident(a) keyword(match) operator({)
      keyword(case) predefined_type(None)    operator(=)operator(>) predefined_type(Right)operator(()local_variable(this)operator(\))
      keyword(case) predefined_type(Some)operator(()ident(i)operator(\)) operator(=)operator(>) predefined_type(Right)operator(()keyword(new) ident(Optional)operator(()ident(i)operator(.)ident(validateKeyReferenced)operator(()ident(g)operator(\))operator(.)ident(right)operator(.)ident(toOption)operator(,) ident(f)operator(\))operator(\))
    operator(})
    keyword(def) ident(mapConstant)operator(()ident(g)operator(:) ident(MapConstant)operator(\))operator(:) ident(Initialize)operator([)ident(T)operator(]) operator(=) keyword(new) ident(Optional)operator(()ident(a) ident(map) ident(mapConstantT)operator(()ident(g)operator(\))operator(.)ident(fn)operator(,) ident(f)operator(\))
    keyword(def) ident(evaluate)operator(()ident(ss)operator(:) ident(Settings)operator([)ident(Scope)operator(])operator(\))operator(:) ident(T) operator(=) ident(f)operator(()ident(a)operator(.)ident(flatMap)operator(()ident(i) operator(=)operator(>) ident(trapBadRef)operator(()ident(evaluateT)operator(()ident(ss)operator(\))operator(()ident(i)operator(\))operator(\))operator(\))operator(\))
    comment(// proper solution is for evaluate to be deprecated or for external use only and a new internal method returning Either be used)
    directive(private)operator([)local_variable(this)operator(]) keyword(def) ident(trapBadRef)operator([)ident(A)operator(])operator(()ident(run)operator(:) operator(=)operator(>) ident(A)operator(\))operator(:) predefined_type(Option)operator([)ident(A)operator(]) operator(=) keyword(try) predefined_type(Some)operator(()ident(run)operator(\)) keyword(catch) operator({) keyword(case) ident(e)operator(:) ident(InvalidReference) operator(=)operator(>) predefined_type(None) operator(})
    directive(private)operator([)ident(sbt)operator(]) keyword(def) ident(processAttributes)operator([)ident(S)operator(])operator(()ident(init)operator(:) ident(S)operator(\))operator(()ident(f)operator(:) operator(()ident(S)operator(,) ident(AttributeMap)operator(\)) operator(=)operator(>) ident(S)operator(\))operator(:) ident(S) operator(=) ident(a) keyword(match) operator({)
      keyword(case) predefined_type(None)    operator(=)operator(>) ident(init)
      keyword(case) predefined_type(Some)operator(()ident(i)operator(\)) operator(=)operator(>) ident(i)operator(.)ident(processAttributes)operator(()ident(init)operator(\))operator(()ident(f)operator(\))
    operator(})
  operator(})
  directive(private)operator([)ident(sbt)operator(]) directive(final) type(class) class(Value)operator([)ident(T)operator(])operator(()keyword(val) ident(value)operator(:) operator(()operator(\)) operator(=)operator(>) ident(T)operator(\)) directive(extends) ident(Initialize)operator([)ident(T)operator(]) operator({)
    keyword(def) ident(dependencies) operator(=) predefined_type(Nil)
    keyword(def) ident(mapReferenced)operator(()ident(g)operator(:) ident(MapScoped)operator(\)) operator(=) local_variable(this)
    keyword(def) ident(validateKeyReferenced)operator(()ident(g)operator(:) ident(ValidateKeyRef)operator(\)) operator(=) predefined_type(Right)operator(()local_variable(this)operator(\))
    keyword(def) ident(apply)operator([)ident(S)operator(])operator(()ident(g)operator(:) ident(T) operator(=)operator(>) ident(S)operator(\)) operator(=) keyword(new) ident(Value)operator([)ident(S)operator(])operator(()operator(()operator(\)) operator(=)operator(>) ident(g)operator(()ident(value)operator(()operator(\))operator(\))operator(\))
    keyword(def) ident(mapConstant)operator(()ident(g)operator(:) ident(MapConstant)operator(\)) operator(=) local_variable(this)
    keyword(def) ident(evaluate)operator(()ident(map)operator(:) ident(Settings)operator([)ident(Scope)operator(])operator(\))operator(:) ident(T) operator(=) ident(value)operator(()operator(\))
    directive(private)operator([)ident(sbt)operator(]) keyword(def) ident(processAttributes)operator([)ident(S)operator(])operator(()ident(init)operator(:) ident(S)operator(\))operator(()ident(f)operator(:) operator(()ident(S)operator(,) ident(AttributeMap)operator(\)) operator(=)operator(>) ident(S)operator(\))operator(:) ident(S) operator(=) ident(init)
  operator(})
  directive(private)operator([)ident(sbt)operator(]) directive(final) keyword(object) ident(StaticScopes) directive(extends) ident(Initialize)operator([)predefined_type(Set)operator([)ident(Scope)operator(])operator(]) operator({)
    keyword(def) ident(dependencies) operator(=) predefined_type(Nil)
    keyword(def) ident(mapReferenced)operator(()ident(g)operator(:) ident(MapScoped)operator(\)) operator(=) local_variable(this)
    keyword(def) ident(validateKeyReferenced)operator(()ident(g)operator(:) ident(ValidateKeyRef)operator(\)) operator(=) predefined_type(Right)operator(()local_variable(this)operator(\))
    keyword(def) ident(apply)operator([)ident(S)operator(])operator(()ident(g)operator(:) predefined_type(Set)operator([)ident(Scope)operator(]) operator(=)operator(>) ident(S)operator(\)) operator(=) ident(map)operator(()local_variable(this)operator(\))operator(()ident(g)operator(\))
    keyword(def) ident(mapConstant)operator(()ident(g)operator(:) ident(MapConstant)operator(\)) operator(=) local_variable(this)
    keyword(def) ident(evaluate)operator(()ident(map)operator(:) ident(Settings)operator([)ident(Scope)operator(])operator(\)) operator(=) ident(map)operator(.)ident(scopes)
    directive(private)operator([)ident(sbt)operator(]) keyword(def) ident(processAttributes)operator([)ident(S)operator(])operator(()ident(init)operator(:) ident(S)operator(\))operator(()ident(f)operator(:) operator(()ident(S)operator(,) ident(AttributeMap)operator(\)) operator(=)operator(>) ident(S)operator(\))operator(:) ident(S) operator(=) ident(init)
  operator(})
  directive(private)operator([)ident(sbt)operator(]) directive(final) type(class) class(Apply)operator([)ident(K)operator([)ident(L)operator([)ident(x)operator(])operator(])operator(,) ident(T)operator(])operator(()keyword(val) ident(f)operator(:) ident(K)operator([)ident(Id)operator(]) operator(=)operator(>) ident(T)operator(,) keyword(val) ident(inputs)operator(:) ident(K)operator([)ident(Initialize)operator(])operator(,) keyword(val) ident(alist)operator(:) ident(AList)operator([)ident(K)operator(])operator(\)) directive(extends) ident(Initialize)operator([)ident(T)operator(]) operator({)
    keyword(def) ident(dependencies) operator(=) ident(deps)operator(()ident(alist)operator(.)ident(toList)operator(()ident(inputs)operator(\))operator(\))
    keyword(def) ident(mapReferenced)operator(()ident(g)operator(:) ident(MapScoped)operator(\)) operator(=) ident(mapInputs)operator(()ident(mapReferencedT)operator(()ident(g)operator(\))operator(\))
    keyword(def) ident(apply)operator([)ident(S)operator(])operator(()ident(g)operator(:) ident(T) operator(=)operator(>) ident(S)operator(\)) operator(=) keyword(new) ident(Apply)operator(()ident(g) ident(compose) ident(f)operator(,) ident(inputs)operator(,) ident(alist)operator(\))
    keyword(def) ident(mapConstant)operator(()ident(g)operator(:) ident(MapConstant)operator(\)) operator(=) ident(mapInputs)operator(()ident(mapConstantT)operator(()ident(g)operator(\))operator(\))
    keyword(def) ident(mapInputs)operator(()ident(g)operator(:) ident(Initialize) operator(~)operator(>) ident(Initialize)operator(\))operator(:) ident(Initialize)operator([)ident(T)operator(]) operator(=) keyword(new) ident(Apply)operator(()ident(f)operator(,) ident(alist)operator(.)ident(transform)operator(()ident(inputs)operator(,) ident(g)operator(\))operator(,) ident(alist)operator(\))
    keyword(def) ident(evaluate)operator(()ident(ss)operator(:) ident(Settings)operator([)ident(Scope)operator(])operator(\)) operator(=) ident(f)operator(()ident(alist)operator(.)ident(transform)operator(()ident(inputs)operator(,) ident(evaluateT)operator(()ident(ss)operator(\))operator(\))operator(\))
    keyword(def) ident(validateKeyReferenced)operator(()ident(g)operator(:) ident(ValidateKeyRef)operator(\)) operator(=)
      operator({)
        keyword(val) ident(tx) operator(=) ident(alist)operator(.)ident(transform)operator(()ident(inputs)operator(,) ident(validateKeyReferencedT)operator(()ident(g)operator(\))operator(\))
        keyword(val) ident(undefs) operator(=) ident(alist)operator(.)ident(toList)operator(()ident(tx)operator(\))operator(.)ident(flatMap)operator(()ident(_)operator(.)ident(left)operator(.)ident(toSeq)operator(.)ident(flatten)operator(\))
        keyword(val) ident(get) operator(=) keyword(new) operator(()ident(ValidatedInit) operator(~)operator(>) ident(Initialize)operator(\)) operator({) keyword(def) ident(apply)operator([)ident(T)operator(])operator(()ident(vr)operator(:) ident(ValidatedInit)operator([)ident(T)operator(])operator(\)) operator(=) ident(vr)operator(.)ident(right)operator(.)ident(get) operator(})
        keyword(if) operator(()ident(undefs)operator(.)ident(isEmpty)operator(\)) predefined_type(Right)operator(()keyword(new) ident(Apply)operator(()ident(f)operator(,) ident(alist)operator(.)ident(transform)operator(()ident(tx)operator(,) ident(get)operator(\))operator(,) ident(alist)operator(\))operator(\)) keyword(else) predefined_type(Left)operator(()ident(undefs)operator(\))
      operator(})

    directive(private)operator([)ident(sbt)operator(]) keyword(def) ident(processAttributes)operator([)ident(S)operator(])operator(()ident(init)operator(:) ident(S)operator(\))operator(()ident(f)operator(:) operator(()ident(S)operator(,) ident(AttributeMap)operator(\)) operator(=)operator(>) ident(S)operator(\))operator(:) ident(S) operator(=)
      operator(()ident(init) operator(/)operator(:) ident(alist)operator(.)ident(toList)operator(()ident(inputs)operator(\))operator(\)) operator({) operator(()ident(v)operator(,) ident(i)operator(\)) operator(=)operator(>) ident(i)operator(.)ident(processAttributes)operator(()ident(v)operator(\))operator(()ident(f)operator(\)) operator(})
  operator(})
  directive(private) keyword(def) ident(remove)operator([)ident(T)operator(])operator(()ident(s)operator(:) predefined_type(Seq)operator([)ident(T)operator(])operator(,) ident(v)operator(:) ident(T)operator(\)) operator(=) ident(s) ident(filterNot) operator(()ident(_) operator(==) ident(v)operator(\))
operator(})
